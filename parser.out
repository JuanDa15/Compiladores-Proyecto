Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> OPEN_TAG declaration_list CLOSE_TAG
Rule 2     declaration_list -> declaration_list declaration
Rule 3     declaration_list -> declaration
Rule 4     declaration -> var_declaration
Rule 5     declaration -> fun_declaration
Rule 6     declaration -> header_declaration
Rule 7     declaration -> class_declaration
Rule 8     declaration -> print_stmt
Rule 9     declaration -> selection_stmt
Rule 10    declaration -> iteration_stmt
Rule 11    print_stmt -> print_stmt ECHO STRING SEMICOLON
Rule 12    print_stmt -> print_stmt ECHO ID SEMICOLON
Rule 13    print_stmt -> empty
Rule 14    header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON
Rule 15    header_declaration -> REQUIRE STRING SEMICOLON
Rule 16    class_declaration -> CLASS FUNCTION_NAME class_stmt
Rule 17    class_stmt -> LBLOCK attributes methods RBLOCK
Rule 18    class_stmt -> LBLOCK empty RBLOCK
Rule 19    class_stmt -> LBLOCK attributes RBLOCK
Rule 20    attributes -> attributes scope var_declaration
Rule 21    attributes -> scope var_declaration
Rule 22    methods -> methods scope fun_declaration
Rule 23    methods -> scope fun_declaration
Rule 24    scope -> PRIVATE
Rule 25    scope -> PUBLIC
Rule 26    scope -> PROTECTED
Rule 27    var_declaration -> ID SEMICOLON var_declaration
Rule 28    var_declaration -> ID SEMICOLON
Rule 29    var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration
Rule 30    var_declaration -> ID EQUAL NUMBER SEMICOLON
Rule 31    var_declaration -> ID EQUAL boolean SEMICOLON var_declaration
Rule 32    var_declaration -> ID EQUAL boolean SEMICOLON
Rule 33    var_declaration -> ID EQUAL ID SEMICOLON var_declaration
Rule 34    var_declaration -> ID EQUAL ID SEMICOLON
Rule 35    var_declaration -> AMPERSANT ID SEMICOLON var_declaration
Rule 36    var_declaration -> AMPERSANT ID SEMICOLON
Rule 37    fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt
Rule 38    params -> param_list
Rule 39    params -> empty
Rule 40    param_list -> param_list COMMA param
Rule 41    param_list -> param
Rule 42    param -> ID
Rule 43    param -> ID LBRACKET RBRACKET
Rule 44    compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
Rule 45    local_declarations -> local_declarations var_declaration
Rule 46    local_declarations -> empty
Rule 47    statement_list -> statement_list statement
Rule 48    statement_list -> empty
Rule 49    statement -> expression_stmt
Rule 50    statement -> compount_stmt
Rule 51    statement -> selection_stmt
Rule 52    statement -> iteration_stmt
Rule 53    statement -> return_stmt
Rule 54    expression_stmt -> expression SEMICOLON
Rule 55    expression_stmt -> SEMICOLON
Rule 56    selection_stmt -> IF LPAREN expression RPAREN statement
Rule 57    selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement
Rule 58    selection_stmt -> SWITCH LPAREN var RPAREN statement
Rule 59    selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON
Rule 60    selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON
Rule 61    selection_stmt -> print_stmt
Rule 62    iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
Rule 63    iteration_stmt -> WHILE LPAREN expression RPAREN statement
Rule 64    iteration_stmt -> print_stmt
Rule 65    return_stmt -> RETURN SEMICOLON
Rule 66    return_stmt -> RETURN expression SEMICOLON
Rule 67    expression -> var EQUAL expression
Rule 68    expression -> simple_expression
Rule 69    expression -> var EQUAL AMPERSANT ID
Rule 70    var -> ID
Rule 71    var -> ID LBRACKET expression RBRACKET
Rule 72    simple_expression -> additive_expression relop additive_expression
Rule 73    simple_expression -> additive_expression
Rule 74    relop -> LESS
Rule 75    relop -> LESSEQUAL
Rule 76    relop -> GREATER
Rule 77    relop -> GREATEREQUAL
Rule 78    relop -> DEQUAL
Rule 79    relop -> ISEQUAL
Rule 80    additive_expression -> additive_expression addop term
Rule 81    additive_expression -> term
Rule 82    additive_expression -> term MINUSMINUS
Rule 83    additive_expression -> term PLUSPLUS
Rule 84    addop -> PLUS
Rule 85    addop -> MINUS
Rule 86    term -> term mulop factor
Rule 87    term -> factor
Rule 88    mulop -> TIMES
Rule 89    mulop -> DIVIDE
Rule 90    factor -> LPAREN expression RPAREN
Rule 91    factor -> var
Rule 92    factor -> call
Rule 93    factor -> NUMBER
Rule 94    factor -> boolean
Rule 95    call -> ID LPAREN args RPAREN
Rule 96    args -> args_list
Rule 97    args -> empty
Rule 98    args_list -> args_list COMMA expression
Rule 99    args_list -> expression
Rule 100   boolean -> TRUE
Rule 101   boolean -> FALSE
Rule 102   empty -> <empty>

Terminals, with rules where they appear

AMPERSANT            : 35 36 69
BREAK                : 59 60
CASE                 : 59
CLASS                : 16
CLOSE_TAG            : 1
COLON                : 59 60
COMMA                : 40 98
DEFAULT              : 60
DEQUAL               : 78
DIVIDE               : 89
ECHO                 : 11 12
ELSE                 : 57
EQUAL                : 29 30 31 32 33 34 67 69
FALSE                : 101
FOR                  : 62
FUNCTION             : 37
FUNCTION_NAME        : 16 37
GREATER              : 76
GREATEREQUAL         : 77
ID                   : 12 27 28 29 30 31 32 33 33 34 34 35 36 42 43 69 70 71 95
IF                   : 56 57
ISEQUAL              : 79
LBLOCK               : 17 18 19 44
LBRACKET             : 43 71
LESS                 : 74
LESSEQUAL            : 75
LPAREN               : 14 37 56 57 58 62 63 90 95
MINUS                : 85
MINUSMINUS           : 82
NUMBER               : 29 30 59 93
OPEN_TAG             : 1
PLUS                 : 84
PLUSPLUS             : 83
PRIVATE              : 24
PROTECTED            : 26
PUBLIC               : 25
RBLOCK               : 17 18 19 44
RBRACKET             : 43 71
REQUIRE              : 14 15
RETURN               : 65 66
RPAREN               : 14 37 56 57 58 62 63 90 95
SEMICOLON            : 11 12 14 15 27 28 29 30 31 32 33 34 35 36 54 55 59 60 62 62 65 66
STRING               : 11 14 15
SWITCH               : 58
TIMES                : 88
TRUE                 : 100
WHILE                : 63
error                : 

Nonterminals, with rules where they appear

additive_expression  : 62 72 72 73 80
addop                : 80
args                 : 95
args_list            : 96 98
attributes           : 17 19 20
boolean              : 31 32 94
call                 : 92
class_declaration    : 7
class_stmt           : 16
compount_stmt        : 37 50
declaration          : 2 3
declaration_list     : 1 2
empty                : 13 18 39 46 48 97
expression           : 54 56 57 62 63 66 67 71 90 98 99
expression_stmt      : 49
factor               : 86 87
fun_declaration      : 5 22 23
header_declaration   : 6
iteration_stmt       : 10 52
local_declarations   : 44 45
methods              : 17 22
mulop                : 86
param                : 40 41
param_list           : 38 40
params               : 37
print_stmt           : 8 11 12 44 44 44 61 64
program              : 0
relop                : 72
return_stmt          : 53
scope                : 20 21 22 23
selection_stmt       : 9 51
simple_expression    : 68
statement            : 47 56 57 57 58 59 60 62 63
statement_list       : 44 47
term                 : 80 81 82 83 86
var                  : 58 67 69 91
var_declaration      : 4 20 21 27 29 31 33 35 45 62

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . OPEN_TAG declaration_list CLOSE_TAG

    OPEN_TAG        shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> OPEN_TAG . declaration_list CLOSE_TAG
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) declaration -> . header_declaration
    (7) declaration -> . class_declaration
    (8) declaration -> . print_stmt
    (9) declaration -> . selection_stmt
    (10) declaration -> . iteration_stmt
    (27) var_declaration -> . ID SEMICOLON var_declaration
    (28) var_declaration -> . ID SEMICOLON
    (29) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (31) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (36) var_declaration -> . AMPERSANT ID SEMICOLON
    (37) fun_declaration -> . FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt
    (14) header_declaration -> . REQUIRE LPAREN STRING RPAREN SEMICOLON
    (15) header_declaration -> . REQUIRE STRING SEMICOLON
    (16) class_declaration -> . CLASS FUNCTION_NAME class_stmt
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (56) selection_stmt -> . IF LPAREN expression RPAREN statement
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . print_stmt
    (62) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (63) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (64) iteration_stmt -> . print_stmt
    (102) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13
    FUNCTION        shift and go to state 14
    REQUIRE         shift and go to state 15
    CLASS           shift and go to state 16
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    ECHO            reduce using rule 102 (empty -> .)
    CLOSE_TAG       reduce using rule 102 (empty -> .)

  ! ID              [ reduce using rule 102 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 102 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 102 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 102 (empty -> .) ]
  ! CLASS           [ reduce using rule 102 (empty -> .) ]
  ! IF              [ reduce using rule 102 (empty -> .) ]
  ! SWITCH          [ reduce using rule 102 (empty -> .) ]
  ! CASE            [ reduce using rule 102 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 102 (empty -> .) ]
  ! FOR             [ reduce using rule 102 (empty -> .) ]
  ! WHILE           [ reduce using rule 102 (empty -> .) ]

    declaration_list               shift and go to state 3
    declaration                    shift and go to state 4
    var_declaration                shift and go to state 5
    fun_declaration                shift and go to state 6
    header_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    print_stmt                     shift and go to state 9
    selection_stmt                 shift and go to state 10
    iteration_stmt                 shift and go to state 11
    empty                          shift and go to state 17

state 3

    (1) program -> OPEN_TAG declaration_list . CLOSE_TAG
    (2) declaration_list -> declaration_list . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) declaration -> . header_declaration
    (7) declaration -> . class_declaration
    (8) declaration -> . print_stmt
    (9) declaration -> . selection_stmt
    (10) declaration -> . iteration_stmt
    (27) var_declaration -> . ID SEMICOLON var_declaration
    (28) var_declaration -> . ID SEMICOLON
    (29) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (31) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (36) var_declaration -> . AMPERSANT ID SEMICOLON
    (37) fun_declaration -> . FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt
    (14) header_declaration -> . REQUIRE LPAREN STRING RPAREN SEMICOLON
    (15) header_declaration -> . REQUIRE STRING SEMICOLON
    (16) class_declaration -> . CLASS FUNCTION_NAME class_stmt
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (56) selection_stmt -> . IF LPAREN expression RPAREN statement
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . print_stmt
    (62) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (63) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (64) iteration_stmt -> . print_stmt
    (102) empty -> .

  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    CLOSE_TAG       shift and go to state 24
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13
    FUNCTION        shift and go to state 14
    REQUIRE         shift and go to state 15
    CLASS           shift and go to state 16
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    ECHO            reduce using rule 102 (empty -> .)

  ! CLOSE_TAG       [ reduce using rule 102 (empty -> .) ]
  ! ID              [ reduce using rule 102 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 102 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 102 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 102 (empty -> .) ]
  ! CLASS           [ reduce using rule 102 (empty -> .) ]
  ! IF              [ reduce using rule 102 (empty -> .) ]
  ! SWITCH          [ reduce using rule 102 (empty -> .) ]
  ! CASE            [ reduce using rule 102 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 102 (empty -> .) ]
  ! FOR             [ reduce using rule 102 (empty -> .) ]
  ! WHILE           [ reduce using rule 102 (empty -> .) ]

    declaration                    shift and go to state 25
    var_declaration                shift and go to state 5
    fun_declaration                shift and go to state 6
    header_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    print_stmt                     shift and go to state 9
    selection_stmt                 shift and go to state 10
    iteration_stmt                 shift and go to state 11
    empty                          shift and go to state 17

state 4

    (3) declaration_list -> declaration .

    CLOSE_TAG       reduce using rule 3 (declaration_list -> declaration .)
    ID              reduce using rule 3 (declaration_list -> declaration .)
    AMPERSANT       reduce using rule 3 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 3 (declaration_list -> declaration .)
    REQUIRE         reduce using rule 3 (declaration_list -> declaration .)
    CLASS           reduce using rule 3 (declaration_list -> declaration .)
    IF              reduce using rule 3 (declaration_list -> declaration .)
    SWITCH          reduce using rule 3 (declaration_list -> declaration .)
    CASE            reduce using rule 3 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 3 (declaration_list -> declaration .)
    FOR             reduce using rule 3 (declaration_list -> declaration .)
    WHILE           reduce using rule 3 (declaration_list -> declaration .)
    ECHO            reduce using rule 3 (declaration_list -> declaration .)


state 5

    (4) declaration -> var_declaration .

    CLOSE_TAG       reduce using rule 4 (declaration -> var_declaration .)
    ID              reduce using rule 4 (declaration -> var_declaration .)
    AMPERSANT       reduce using rule 4 (declaration -> var_declaration .)
    FUNCTION        reduce using rule 4 (declaration -> var_declaration .)
    REQUIRE         reduce using rule 4 (declaration -> var_declaration .)
    CLASS           reduce using rule 4 (declaration -> var_declaration .)
    IF              reduce using rule 4 (declaration -> var_declaration .)
    SWITCH          reduce using rule 4 (declaration -> var_declaration .)
    CASE            reduce using rule 4 (declaration -> var_declaration .)
    DEFAULT         reduce using rule 4 (declaration -> var_declaration .)
    FOR             reduce using rule 4 (declaration -> var_declaration .)
    WHILE           reduce using rule 4 (declaration -> var_declaration .)
    ECHO            reduce using rule 4 (declaration -> var_declaration .)


state 6

    (5) declaration -> fun_declaration .

    CLOSE_TAG       reduce using rule 5 (declaration -> fun_declaration .)
    ID              reduce using rule 5 (declaration -> fun_declaration .)
    AMPERSANT       reduce using rule 5 (declaration -> fun_declaration .)
    FUNCTION        reduce using rule 5 (declaration -> fun_declaration .)
    REQUIRE         reduce using rule 5 (declaration -> fun_declaration .)
    CLASS           reduce using rule 5 (declaration -> fun_declaration .)
    IF              reduce using rule 5 (declaration -> fun_declaration .)
    SWITCH          reduce using rule 5 (declaration -> fun_declaration .)
    CASE            reduce using rule 5 (declaration -> fun_declaration .)
    DEFAULT         reduce using rule 5 (declaration -> fun_declaration .)
    FOR             reduce using rule 5 (declaration -> fun_declaration .)
    WHILE           reduce using rule 5 (declaration -> fun_declaration .)
    ECHO            reduce using rule 5 (declaration -> fun_declaration .)


state 7

    (6) declaration -> header_declaration .

    CLOSE_TAG       reduce using rule 6 (declaration -> header_declaration .)
    ID              reduce using rule 6 (declaration -> header_declaration .)
    AMPERSANT       reduce using rule 6 (declaration -> header_declaration .)
    FUNCTION        reduce using rule 6 (declaration -> header_declaration .)
    REQUIRE         reduce using rule 6 (declaration -> header_declaration .)
    CLASS           reduce using rule 6 (declaration -> header_declaration .)
    IF              reduce using rule 6 (declaration -> header_declaration .)
    SWITCH          reduce using rule 6 (declaration -> header_declaration .)
    CASE            reduce using rule 6 (declaration -> header_declaration .)
    DEFAULT         reduce using rule 6 (declaration -> header_declaration .)
    FOR             reduce using rule 6 (declaration -> header_declaration .)
    WHILE           reduce using rule 6 (declaration -> header_declaration .)
    ECHO            reduce using rule 6 (declaration -> header_declaration .)


state 8

    (7) declaration -> class_declaration .

    CLOSE_TAG       reduce using rule 7 (declaration -> class_declaration .)
    ID              reduce using rule 7 (declaration -> class_declaration .)
    AMPERSANT       reduce using rule 7 (declaration -> class_declaration .)
    FUNCTION        reduce using rule 7 (declaration -> class_declaration .)
    REQUIRE         reduce using rule 7 (declaration -> class_declaration .)
    CLASS           reduce using rule 7 (declaration -> class_declaration .)
    IF              reduce using rule 7 (declaration -> class_declaration .)
    SWITCH          reduce using rule 7 (declaration -> class_declaration .)
    CASE            reduce using rule 7 (declaration -> class_declaration .)
    DEFAULT         reduce using rule 7 (declaration -> class_declaration .)
    FOR             reduce using rule 7 (declaration -> class_declaration .)
    WHILE           reduce using rule 7 (declaration -> class_declaration .)
    ECHO            reduce using rule 7 (declaration -> class_declaration .)


state 9

    (8) declaration -> print_stmt .
    (11) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (12) print_stmt -> print_stmt . ECHO ID SEMICOLON
    (61) selection_stmt -> print_stmt .
    (64) iteration_stmt -> print_stmt .

  ! shift/reduce conflict for ECHO resolved as shift
  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for ID resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for CLASS resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 8 (declaration -> print_stmt .)
  ! shift/reduce conflict for ECHO resolved as shift
  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for ID resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for CLASS resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 8 (declaration -> print_stmt .)
  ! shift/reduce conflict for ECHO resolved as shift
    CLOSE_TAG       reduce using rule 8 (declaration -> print_stmt .)
    ID              reduce using rule 8 (declaration -> print_stmt .)
    AMPERSANT       reduce using rule 8 (declaration -> print_stmt .)
    FUNCTION        reduce using rule 8 (declaration -> print_stmt .)
    REQUIRE         reduce using rule 8 (declaration -> print_stmt .)
    CLASS           reduce using rule 8 (declaration -> print_stmt .)
    IF              reduce using rule 8 (declaration -> print_stmt .)
    SWITCH          reduce using rule 8 (declaration -> print_stmt .)
    CASE            reduce using rule 8 (declaration -> print_stmt .)
    DEFAULT         reduce using rule 8 (declaration -> print_stmt .)
    FOR             reduce using rule 8 (declaration -> print_stmt .)
    WHILE           reduce using rule 8 (declaration -> print_stmt .)
    ECHO            shift and go to state 26

  ! ECHO            [ reduce using rule 8 (declaration -> print_stmt .) ]
  ! CLOSE_TAG       [ reduce using rule 61 (selection_stmt -> print_stmt .) ]
  ! ID              [ reduce using rule 61 (selection_stmt -> print_stmt .) ]
  ! AMPERSANT       [ reduce using rule 61 (selection_stmt -> print_stmt .) ]
  ! FUNCTION        [ reduce using rule 61 (selection_stmt -> print_stmt .) ]
  ! REQUIRE         [ reduce using rule 61 (selection_stmt -> print_stmt .) ]
  ! CLASS           [ reduce using rule 61 (selection_stmt -> print_stmt .) ]
  ! IF              [ reduce using rule 61 (selection_stmt -> print_stmt .) ]
  ! SWITCH          [ reduce using rule 61 (selection_stmt -> print_stmt .) ]
  ! CASE            [ reduce using rule 61 (selection_stmt -> print_stmt .) ]
  ! DEFAULT         [ reduce using rule 61 (selection_stmt -> print_stmt .) ]
  ! FOR             [ reduce using rule 61 (selection_stmt -> print_stmt .) ]
  ! WHILE           [ reduce using rule 61 (selection_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 61 (selection_stmt -> print_stmt .) ]
  ! CLOSE_TAG       [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! ID              [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! AMPERSANT       [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! FUNCTION        [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! REQUIRE         [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! CLASS           [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! IF              [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! SWITCH          [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! CASE            [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! DEFAULT         [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! FOR             [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! WHILE           [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]


state 10

    (9) declaration -> selection_stmt .

    CLOSE_TAG       reduce using rule 9 (declaration -> selection_stmt .)
    ID              reduce using rule 9 (declaration -> selection_stmt .)
    AMPERSANT       reduce using rule 9 (declaration -> selection_stmt .)
    FUNCTION        reduce using rule 9 (declaration -> selection_stmt .)
    REQUIRE         reduce using rule 9 (declaration -> selection_stmt .)
    CLASS           reduce using rule 9 (declaration -> selection_stmt .)
    IF              reduce using rule 9 (declaration -> selection_stmt .)
    SWITCH          reduce using rule 9 (declaration -> selection_stmt .)
    CASE            reduce using rule 9 (declaration -> selection_stmt .)
    DEFAULT         reduce using rule 9 (declaration -> selection_stmt .)
    FOR             reduce using rule 9 (declaration -> selection_stmt .)
    WHILE           reduce using rule 9 (declaration -> selection_stmt .)
    ECHO            reduce using rule 9 (declaration -> selection_stmt .)


state 11

    (10) declaration -> iteration_stmt .

    CLOSE_TAG       reduce using rule 10 (declaration -> iteration_stmt .)
    ID              reduce using rule 10 (declaration -> iteration_stmt .)
    AMPERSANT       reduce using rule 10 (declaration -> iteration_stmt .)
    FUNCTION        reduce using rule 10 (declaration -> iteration_stmt .)
    REQUIRE         reduce using rule 10 (declaration -> iteration_stmt .)
    CLASS           reduce using rule 10 (declaration -> iteration_stmt .)
    IF              reduce using rule 10 (declaration -> iteration_stmt .)
    SWITCH          reduce using rule 10 (declaration -> iteration_stmt .)
    CASE            reduce using rule 10 (declaration -> iteration_stmt .)
    DEFAULT         reduce using rule 10 (declaration -> iteration_stmt .)
    FOR             reduce using rule 10 (declaration -> iteration_stmt .)
    WHILE           reduce using rule 10 (declaration -> iteration_stmt .)
    ECHO            reduce using rule 10 (declaration -> iteration_stmt .)


state 12

    (27) var_declaration -> ID . SEMICOLON var_declaration
    (28) var_declaration -> ID . SEMICOLON
    (29) var_declaration -> ID . EQUAL NUMBER SEMICOLON var_declaration
    (30) var_declaration -> ID . EQUAL NUMBER SEMICOLON
    (31) var_declaration -> ID . EQUAL boolean SEMICOLON var_declaration
    (32) var_declaration -> ID . EQUAL boolean SEMICOLON
    (33) var_declaration -> ID . EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> ID . EQUAL ID SEMICOLON

    SEMICOLON       shift and go to state 27
    EQUAL           shift and go to state 28


state 13

    (35) var_declaration -> AMPERSANT . ID SEMICOLON var_declaration
    (36) var_declaration -> AMPERSANT . ID SEMICOLON

    ID              shift and go to state 29


state 14

    (37) fun_declaration -> FUNCTION . FUNCTION_NAME LPAREN params RPAREN compount_stmt

    FUNCTION_NAME   shift and go to state 30


state 15

    (14) header_declaration -> REQUIRE . LPAREN STRING RPAREN SEMICOLON
    (15) header_declaration -> REQUIRE . STRING SEMICOLON

    LPAREN          shift and go to state 31
    STRING          shift and go to state 32


state 16

    (16) class_declaration -> CLASS . FUNCTION_NAME class_stmt

    FUNCTION_NAME   shift and go to state 33


state 17

    (13) print_stmt -> empty .

    ECHO            reduce using rule 13 (print_stmt -> empty .)
    CLOSE_TAG       reduce using rule 13 (print_stmt -> empty .)
    ID              reduce using rule 13 (print_stmt -> empty .)
    AMPERSANT       reduce using rule 13 (print_stmt -> empty .)
    FUNCTION        reduce using rule 13 (print_stmt -> empty .)
    REQUIRE         reduce using rule 13 (print_stmt -> empty .)
    CLASS           reduce using rule 13 (print_stmt -> empty .)
    IF              reduce using rule 13 (print_stmt -> empty .)
    SWITCH          reduce using rule 13 (print_stmt -> empty .)
    CASE            reduce using rule 13 (print_stmt -> empty .)
    DEFAULT         reduce using rule 13 (print_stmt -> empty .)
    FOR             reduce using rule 13 (print_stmt -> empty .)
    WHILE           reduce using rule 13 (print_stmt -> empty .)
    BREAK           reduce using rule 13 (print_stmt -> empty .)
    SEMICOLON       reduce using rule 13 (print_stmt -> empty .)
    LBLOCK          reduce using rule 13 (print_stmt -> empty .)
    RETURN          reduce using rule 13 (print_stmt -> empty .)
    LPAREN          reduce using rule 13 (print_stmt -> empty .)
    NUMBER          reduce using rule 13 (print_stmt -> empty .)
    TRUE            reduce using rule 13 (print_stmt -> empty .)
    FALSE           reduce using rule 13 (print_stmt -> empty .)
    RBLOCK          reduce using rule 13 (print_stmt -> empty .)
    ELSE            reduce using rule 13 (print_stmt -> empty .)


state 18

    (56) selection_stmt -> IF . LPAREN expression RPAREN statement
    (57) selection_stmt -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 34


state 19

    (58) selection_stmt -> SWITCH . LPAREN var RPAREN statement

    LPAREN          shift and go to state 35


state 20

    (59) selection_stmt -> CASE . NUMBER COLON statement BREAK SEMICOLON

    NUMBER          shift and go to state 36


state 21

    (60) selection_stmt -> DEFAULT . COLON statement BREAK SEMICOLON

    COLON           shift and go to state 37


state 22

    (62) iteration_stmt -> FOR . LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement

    LPAREN          shift and go to state 38


state 23

    (63) iteration_stmt -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 39


state 24

    (1) program -> OPEN_TAG declaration_list CLOSE_TAG .

    $end            reduce using rule 1 (program -> OPEN_TAG declaration_list CLOSE_TAG .)


state 25

    (2) declaration_list -> declaration_list declaration .

    CLOSE_TAG       reduce using rule 2 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    AMPERSANT       reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 2 (declaration_list -> declaration_list declaration .)
    REQUIRE         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CLASS           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 2 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    ECHO            reduce using rule 2 (declaration_list -> declaration_list declaration .)


state 26

    (11) print_stmt -> print_stmt ECHO . STRING SEMICOLON
    (12) print_stmt -> print_stmt ECHO . ID SEMICOLON

    STRING          shift and go to state 40
    ID              shift and go to state 41


state 27

    (27) var_declaration -> ID SEMICOLON . var_declaration
    (28) var_declaration -> ID SEMICOLON .
    (27) var_declaration -> . ID SEMICOLON var_declaration
    (28) var_declaration -> . ID SEMICOLON
    (29) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (31) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (36) var_declaration -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSE_TAG       reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    FUNCTION        reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    REQUIRE         reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    CLASS           reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    IF              reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    SWITCH          reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    CASE            reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    DEFAULT         reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    FOR             reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    WHILE           reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    ECHO            reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    SEMICOLON       reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    RBLOCK          reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    PRIVATE         reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    PUBLIC          reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    PROTECTED       reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    LBLOCK          reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    RETURN          reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    LPAREN          reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    NUMBER          reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    TRUE            reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    FALSE           reduce using rule 28 (var_declaration -> ID SEMICOLON .)
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

  ! ID              [ reduce using rule 28 (var_declaration -> ID SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 28 (var_declaration -> ID SEMICOLON .) ]

    var_declaration                shift and go to state 42

state 28

    (29) var_declaration -> ID EQUAL . NUMBER SEMICOLON var_declaration
    (30) var_declaration -> ID EQUAL . NUMBER SEMICOLON
    (31) var_declaration -> ID EQUAL . boolean SEMICOLON var_declaration
    (32) var_declaration -> ID EQUAL . boolean SEMICOLON
    (33) var_declaration -> ID EQUAL . ID SEMICOLON var_declaration
    (34) var_declaration -> ID EQUAL . ID SEMICOLON
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

    NUMBER          shift and go to state 44
    ID              shift and go to state 43
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    boolean                        shift and go to state 45

state 29

    (35) var_declaration -> AMPERSANT ID . SEMICOLON var_declaration
    (36) var_declaration -> AMPERSANT ID . SEMICOLON

    SEMICOLON       shift and go to state 48


state 30

    (37) fun_declaration -> FUNCTION FUNCTION_NAME . LPAREN params RPAREN compount_stmt

    LPAREN          shift and go to state 49


state 31

    (14) header_declaration -> REQUIRE LPAREN . STRING RPAREN SEMICOLON

    STRING          shift and go to state 50


state 32

    (15) header_declaration -> REQUIRE STRING . SEMICOLON

    SEMICOLON       shift and go to state 51


state 33

    (16) class_declaration -> CLASS FUNCTION_NAME . class_stmt
    (17) class_stmt -> . LBLOCK attributes methods RBLOCK
    (18) class_stmt -> . LBLOCK empty RBLOCK
    (19) class_stmt -> . LBLOCK attributes RBLOCK

    LBLOCK          shift and go to state 53

    class_stmt                     shift and go to state 52

state 34

    (56) selection_stmt -> IF LPAREN . expression RPAREN statement
    (57) selection_stmt -> IF LPAREN . expression RPAREN statement ELSE statement
    (67) expression -> . var EQUAL expression
    (68) expression -> . simple_expression
    (69) expression -> . var EQUAL AMPERSANT ID
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (72) simple_expression -> . additive_expression relop additive_expression
    (73) simple_expression -> . additive_expression
    (80) additive_expression -> . additive_expression addop term
    (81) additive_expression -> . term
    (82) additive_expression -> . term MINUSMINUS
    (83) additive_expression -> . term PLUSPLUS
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

    ID              shift and go to state 58
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    expression                     shift and go to state 55
    var                            shift and go to state 56
    simple_expression              shift and go to state 57
    additive_expression            shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 35

    (58) selection_stmt -> SWITCH LPAREN . var RPAREN statement
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 66

    var                            shift and go to state 65

state 36

    (59) selection_stmt -> CASE NUMBER . COLON statement BREAK SEMICOLON

    COLON           shift and go to state 67


state 37

    (60) selection_stmt -> DEFAULT COLON . statement BREAK SEMICOLON
    (49) statement -> . expression_stmt
    (50) statement -> . compount_stmt
    (51) statement -> . selection_stmt
    (52) statement -> . iteration_stmt
    (53) statement -> . return_stmt
    (54) expression_stmt -> . expression SEMICOLON
    (55) expression_stmt -> . SEMICOLON
    (44) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (56) selection_stmt -> . IF LPAREN expression RPAREN statement
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . print_stmt
    (62) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (63) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (64) iteration_stmt -> . print_stmt
    (65) return_stmt -> . RETURN SEMICOLON
    (66) return_stmt -> . RETURN expression SEMICOLON
    (67) expression -> . var EQUAL expression
    (68) expression -> . simple_expression
    (69) expression -> . var EQUAL AMPERSANT ID
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (72) simple_expression -> . additive_expression relop additive_expression
    (73) simple_expression -> . additive_expression
    (102) empty -> .
    (80) additive_expression -> . additive_expression addop term
    (81) additive_expression -> . term
    (82) additive_expression -> . term MINUSMINUS
    (83) additive_expression -> . term PLUSPLUS
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

    SEMICOLON       shift and go to state 69
    LBLOCK          shift and go to state 76
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 78
    ID              shift and go to state 58
    ECHO            reduce using rule 102 (empty -> .)
    BREAK           reduce using rule 102 (empty -> .)
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    statement                      shift and go to state 68
    expression_stmt                shift and go to state 70
    compount_stmt                  shift and go to state 71
    selection_stmt                 shift and go to state 72
    iteration_stmt                 shift and go to state 73
    return_stmt                    shift and go to state 74
    expression                     shift and go to state 75
    print_stmt                     shift and go to state 77
    var                            shift and go to state 56
    additive_expression            shift and go to state 59
    simple_expression              shift and go to state 57
    empty                          shift and go to state 17
    term                           shift and go to state 60
    factor                         shift and go to state 61
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 38

    (62) iteration_stmt -> FOR LPAREN . var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (27) var_declaration -> . ID SEMICOLON var_declaration
    (28) var_declaration -> . ID SEMICOLON
    (29) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (31) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (36) var_declaration -> . AMPERSANT ID SEMICOLON

    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

    var_declaration                shift and go to state 79

state 39

    (63) iteration_stmt -> WHILE LPAREN . expression RPAREN statement
    (67) expression -> . var EQUAL expression
    (68) expression -> . simple_expression
    (69) expression -> . var EQUAL AMPERSANT ID
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (72) simple_expression -> . additive_expression relop additive_expression
    (73) simple_expression -> . additive_expression
    (80) additive_expression -> . additive_expression addop term
    (81) additive_expression -> . term
    (82) additive_expression -> . term MINUSMINUS
    (83) additive_expression -> . term PLUSPLUS
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

    ID              shift and go to state 58
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    expression                     shift and go to state 80
    var                            shift and go to state 56
    simple_expression              shift and go to state 57
    additive_expression            shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 40

    (11) print_stmt -> print_stmt ECHO STRING . SEMICOLON

    SEMICOLON       shift and go to state 81


state 41

    (12) print_stmt -> print_stmt ECHO ID . SEMICOLON

    SEMICOLON       shift and go to state 82


state 42

    (27) var_declaration -> ID SEMICOLON var_declaration .

    CLOSE_TAG       reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    ID              reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    CLASS           reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    IF              reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    SWITCH          reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    CASE            reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    FOR             reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    WHILE           reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    ECHO            reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    RETURN          reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    LPAREN          reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    NUMBER          reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    TRUE            reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)
    FALSE           reduce using rule 27 (var_declaration -> ID SEMICOLON var_declaration .)


state 43

    (33) var_declaration -> ID EQUAL ID . SEMICOLON var_declaration
    (34) var_declaration -> ID EQUAL ID . SEMICOLON

    SEMICOLON       shift and go to state 83


state 44

    (29) var_declaration -> ID EQUAL NUMBER . SEMICOLON var_declaration
    (30) var_declaration -> ID EQUAL NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 84


state 45

    (31) var_declaration -> ID EQUAL boolean . SEMICOLON var_declaration
    (32) var_declaration -> ID EQUAL boolean . SEMICOLON

    SEMICOLON       shift and go to state 85


state 46

    (100) boolean -> TRUE .

    SEMICOLON       reduce using rule 100 (boolean -> TRUE .)
    MINUSMINUS      reduce using rule 100 (boolean -> TRUE .)
    PLUSPLUS        reduce using rule 100 (boolean -> TRUE .)
    TIMES           reduce using rule 100 (boolean -> TRUE .)
    DIVIDE          reduce using rule 100 (boolean -> TRUE .)
    LESS            reduce using rule 100 (boolean -> TRUE .)
    LESSEQUAL       reduce using rule 100 (boolean -> TRUE .)
    GREATER         reduce using rule 100 (boolean -> TRUE .)
    GREATEREQUAL    reduce using rule 100 (boolean -> TRUE .)
    DEQUAL          reduce using rule 100 (boolean -> TRUE .)
    ISEQUAL         reduce using rule 100 (boolean -> TRUE .)
    PLUS            reduce using rule 100 (boolean -> TRUE .)
    MINUS           reduce using rule 100 (boolean -> TRUE .)
    RPAREN          reduce using rule 100 (boolean -> TRUE .)
    RBRACKET        reduce using rule 100 (boolean -> TRUE .)
    COMMA           reduce using rule 100 (boolean -> TRUE .)


state 47

    (101) boolean -> FALSE .

    SEMICOLON       reduce using rule 101 (boolean -> FALSE .)
    MINUSMINUS      reduce using rule 101 (boolean -> FALSE .)
    PLUSPLUS        reduce using rule 101 (boolean -> FALSE .)
    TIMES           reduce using rule 101 (boolean -> FALSE .)
    DIVIDE          reduce using rule 101 (boolean -> FALSE .)
    LESS            reduce using rule 101 (boolean -> FALSE .)
    LESSEQUAL       reduce using rule 101 (boolean -> FALSE .)
    GREATER         reduce using rule 101 (boolean -> FALSE .)
    GREATEREQUAL    reduce using rule 101 (boolean -> FALSE .)
    DEQUAL          reduce using rule 101 (boolean -> FALSE .)
    ISEQUAL         reduce using rule 101 (boolean -> FALSE .)
    PLUS            reduce using rule 101 (boolean -> FALSE .)
    MINUS           reduce using rule 101 (boolean -> FALSE .)
    RPAREN          reduce using rule 101 (boolean -> FALSE .)
    RBRACKET        reduce using rule 101 (boolean -> FALSE .)
    COMMA           reduce using rule 101 (boolean -> FALSE .)


state 48

    (35) var_declaration -> AMPERSANT ID SEMICOLON . var_declaration
    (36) var_declaration -> AMPERSANT ID SEMICOLON .
    (27) var_declaration -> . ID SEMICOLON var_declaration
    (28) var_declaration -> . ID SEMICOLON
    (29) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (31) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (36) var_declaration -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSE_TAG       reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    FUNCTION        reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    REQUIRE         reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    CLASS           reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    IF              reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    SWITCH          reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    CASE            reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    DEFAULT         reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    FOR             reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    WHILE           reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    ECHO            reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    SEMICOLON       reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    RBLOCK          reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    PRIVATE         reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    PUBLIC          reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    PROTECTED       reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    LBLOCK          reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    RETURN          reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    LPAREN          reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    NUMBER          reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    TRUE            reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    FALSE           reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .)
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

  ! ID              [ reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON .) ]

    var_declaration                shift and go to state 86

state 49

    (37) fun_declaration -> FUNCTION FUNCTION_NAME LPAREN . params RPAREN compount_stmt
    (38) params -> . param_list
    (39) params -> . empty
    (40) param_list -> . param_list COMMA param
    (41) param_list -> . param
    (102) empty -> .
    (42) param -> . ID
    (43) param -> . ID LBRACKET RBRACKET

    RPAREN          reduce using rule 102 (empty -> .)
    ID              shift and go to state 91

    params                         shift and go to state 87
    param_list                     shift and go to state 88
    empty                          shift and go to state 89
    param                          shift and go to state 90

state 50

    (14) header_declaration -> REQUIRE LPAREN STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 92


state 51

    (15) header_declaration -> REQUIRE STRING SEMICOLON .

    CLOSE_TAG       reduce using rule 15 (header_declaration -> REQUIRE STRING SEMICOLON .)
    ID              reduce using rule 15 (header_declaration -> REQUIRE STRING SEMICOLON .)
    AMPERSANT       reduce using rule 15 (header_declaration -> REQUIRE STRING SEMICOLON .)
    FUNCTION        reduce using rule 15 (header_declaration -> REQUIRE STRING SEMICOLON .)
    REQUIRE         reduce using rule 15 (header_declaration -> REQUIRE STRING SEMICOLON .)
    CLASS           reduce using rule 15 (header_declaration -> REQUIRE STRING SEMICOLON .)
    IF              reduce using rule 15 (header_declaration -> REQUIRE STRING SEMICOLON .)
    SWITCH          reduce using rule 15 (header_declaration -> REQUIRE STRING SEMICOLON .)
    CASE            reduce using rule 15 (header_declaration -> REQUIRE STRING SEMICOLON .)
    DEFAULT         reduce using rule 15 (header_declaration -> REQUIRE STRING SEMICOLON .)
    FOR             reduce using rule 15 (header_declaration -> REQUIRE STRING SEMICOLON .)
    WHILE           reduce using rule 15 (header_declaration -> REQUIRE STRING SEMICOLON .)
    ECHO            reduce using rule 15 (header_declaration -> REQUIRE STRING SEMICOLON .)


state 52

    (16) class_declaration -> CLASS FUNCTION_NAME class_stmt .

    CLOSE_TAG       reduce using rule 16 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    ID              reduce using rule 16 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    AMPERSANT       reduce using rule 16 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    FUNCTION        reduce using rule 16 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    REQUIRE         reduce using rule 16 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    CLASS           reduce using rule 16 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    IF              reduce using rule 16 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    SWITCH          reduce using rule 16 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    CASE            reduce using rule 16 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    DEFAULT         reduce using rule 16 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    FOR             reduce using rule 16 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    WHILE           reduce using rule 16 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    ECHO            reduce using rule 16 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)


state 53

    (17) class_stmt -> LBLOCK . attributes methods RBLOCK
    (18) class_stmt -> LBLOCK . empty RBLOCK
    (19) class_stmt -> LBLOCK . attributes RBLOCK
    (20) attributes -> . attributes scope var_declaration
    (21) attributes -> . scope var_declaration
    (102) empty -> .
    (24) scope -> . PRIVATE
    (25) scope -> . PUBLIC
    (26) scope -> . PROTECTED

    RBLOCK          reduce using rule 102 (empty -> .)
    PRIVATE         shift and go to state 96
    PUBLIC          shift and go to state 97
    PROTECTED       shift and go to state 98

    attributes                     shift and go to state 93
    empty                          shift and go to state 94
    scope                          shift and go to state 95

state 54

    (90) factor -> LPAREN . expression RPAREN
    (67) expression -> . var EQUAL expression
    (68) expression -> . simple_expression
    (69) expression -> . var EQUAL AMPERSANT ID
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (72) simple_expression -> . additive_expression relop additive_expression
    (73) simple_expression -> . additive_expression
    (80) additive_expression -> . additive_expression addop term
    (81) additive_expression -> . term
    (82) additive_expression -> . term MINUSMINUS
    (83) additive_expression -> . term PLUSPLUS
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

    ID              shift and go to state 58
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    expression                     shift and go to state 99
    var                            shift and go to state 56
    simple_expression              shift and go to state 57
    additive_expression            shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 55

    (56) selection_stmt -> IF LPAREN expression . RPAREN statement
    (57) selection_stmt -> IF LPAREN expression . RPAREN statement ELSE statement

    RPAREN          shift and go to state 100


state 56

    (67) expression -> var . EQUAL expression
    (69) expression -> var . EQUAL AMPERSANT ID
    (91) factor -> var .

    EQUAL           shift and go to state 101
    MINUSMINUS      reduce using rule 91 (factor -> var .)
    PLUSPLUS        reduce using rule 91 (factor -> var .)
    TIMES           reduce using rule 91 (factor -> var .)
    DIVIDE          reduce using rule 91 (factor -> var .)
    LESS            reduce using rule 91 (factor -> var .)
    LESSEQUAL       reduce using rule 91 (factor -> var .)
    GREATER         reduce using rule 91 (factor -> var .)
    GREATEREQUAL    reduce using rule 91 (factor -> var .)
    DEQUAL          reduce using rule 91 (factor -> var .)
    ISEQUAL         reduce using rule 91 (factor -> var .)
    PLUS            reduce using rule 91 (factor -> var .)
    MINUS           reduce using rule 91 (factor -> var .)
    RPAREN          reduce using rule 91 (factor -> var .)
    SEMICOLON       reduce using rule 91 (factor -> var .)
    RBRACKET        reduce using rule 91 (factor -> var .)
    COMMA           reduce using rule 91 (factor -> var .)


state 57

    (68) expression -> simple_expression .

    RPAREN          reduce using rule 68 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 68 (expression -> simple_expression .)
    RBRACKET        reduce using rule 68 (expression -> simple_expression .)
    COMMA           reduce using rule 68 (expression -> simple_expression .)


state 58

    (70) var -> ID .
    (71) var -> ID . LBRACKET expression RBRACKET
    (95) call -> ID . LPAREN args RPAREN

    EQUAL           reduce using rule 70 (var -> ID .)
    MINUSMINUS      reduce using rule 70 (var -> ID .)
    PLUSPLUS        reduce using rule 70 (var -> ID .)
    TIMES           reduce using rule 70 (var -> ID .)
    DIVIDE          reduce using rule 70 (var -> ID .)
    LESS            reduce using rule 70 (var -> ID .)
    LESSEQUAL       reduce using rule 70 (var -> ID .)
    GREATER         reduce using rule 70 (var -> ID .)
    GREATEREQUAL    reduce using rule 70 (var -> ID .)
    DEQUAL          reduce using rule 70 (var -> ID .)
    ISEQUAL         reduce using rule 70 (var -> ID .)
    PLUS            reduce using rule 70 (var -> ID .)
    MINUS           reduce using rule 70 (var -> ID .)
    RPAREN          reduce using rule 70 (var -> ID .)
    SEMICOLON       reduce using rule 70 (var -> ID .)
    RBRACKET        reduce using rule 70 (var -> ID .)
    COMMA           reduce using rule 70 (var -> ID .)
    LBRACKET        shift and go to state 102
    LPAREN          shift and go to state 103


state 59

    (72) simple_expression -> additive_expression . relop additive_expression
    (73) simple_expression -> additive_expression .
    (80) additive_expression -> additive_expression . addop term
    (74) relop -> . LESS
    (75) relop -> . LESSEQUAL
    (76) relop -> . GREATER
    (77) relop -> . GREATEREQUAL
    (78) relop -> . DEQUAL
    (79) relop -> . ISEQUAL
    (84) addop -> . PLUS
    (85) addop -> . MINUS

    RPAREN          reduce using rule 73 (simple_expression -> additive_expression .)
    SEMICOLON       reduce using rule 73 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 73 (simple_expression -> additive_expression .)
    COMMA           reduce using rule 73 (simple_expression -> additive_expression .)
    LESS            shift and go to state 106
    LESSEQUAL       shift and go to state 107
    GREATER         shift and go to state 108
    GREATEREQUAL    shift and go to state 109
    DEQUAL          shift and go to state 110
    ISEQUAL         shift and go to state 111
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113

    relop                          shift and go to state 104
    addop                          shift and go to state 105

state 60

    (81) additive_expression -> term .
    (82) additive_expression -> term . MINUSMINUS
    (83) additive_expression -> term . PLUSPLUS
    (86) term -> term . mulop factor
    (88) mulop -> . TIMES
    (89) mulop -> . DIVIDE

    LESS            reduce using rule 81 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 81 (additive_expression -> term .)
    GREATER         reduce using rule 81 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 81 (additive_expression -> term .)
    DEQUAL          reduce using rule 81 (additive_expression -> term .)
    ISEQUAL         reduce using rule 81 (additive_expression -> term .)
    PLUS            reduce using rule 81 (additive_expression -> term .)
    MINUS           reduce using rule 81 (additive_expression -> term .)
    RPAREN          reduce using rule 81 (additive_expression -> term .)
    SEMICOLON       reduce using rule 81 (additive_expression -> term .)
    RBRACKET        reduce using rule 81 (additive_expression -> term .)
    COMMA           reduce using rule 81 (additive_expression -> term .)
    MINUSMINUS      shift and go to state 114
    PLUSPLUS        shift and go to state 115
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 118

    mulop                          shift and go to state 116

state 61

    (87) term -> factor .

    MINUSMINUS      reduce using rule 87 (term -> factor .)
    PLUSPLUS        reduce using rule 87 (term -> factor .)
    TIMES           reduce using rule 87 (term -> factor .)
    DIVIDE          reduce using rule 87 (term -> factor .)
    LESS            reduce using rule 87 (term -> factor .)
    LESSEQUAL       reduce using rule 87 (term -> factor .)
    GREATER         reduce using rule 87 (term -> factor .)
    GREATEREQUAL    reduce using rule 87 (term -> factor .)
    DEQUAL          reduce using rule 87 (term -> factor .)
    ISEQUAL         reduce using rule 87 (term -> factor .)
    PLUS            reduce using rule 87 (term -> factor .)
    MINUS           reduce using rule 87 (term -> factor .)
    RPAREN          reduce using rule 87 (term -> factor .)
    SEMICOLON       reduce using rule 87 (term -> factor .)
    RBRACKET        reduce using rule 87 (term -> factor .)
    COMMA           reduce using rule 87 (term -> factor .)


state 62

    (92) factor -> call .

    MINUSMINUS      reduce using rule 92 (factor -> call .)
    PLUSPLUS        reduce using rule 92 (factor -> call .)
    TIMES           reduce using rule 92 (factor -> call .)
    DIVIDE          reduce using rule 92 (factor -> call .)
    LESS            reduce using rule 92 (factor -> call .)
    LESSEQUAL       reduce using rule 92 (factor -> call .)
    GREATER         reduce using rule 92 (factor -> call .)
    GREATEREQUAL    reduce using rule 92 (factor -> call .)
    DEQUAL          reduce using rule 92 (factor -> call .)
    ISEQUAL         reduce using rule 92 (factor -> call .)
    PLUS            reduce using rule 92 (factor -> call .)
    MINUS           reduce using rule 92 (factor -> call .)
    RPAREN          reduce using rule 92 (factor -> call .)
    SEMICOLON       reduce using rule 92 (factor -> call .)
    RBRACKET        reduce using rule 92 (factor -> call .)
    COMMA           reduce using rule 92 (factor -> call .)


state 63

    (93) factor -> NUMBER .

    MINUSMINUS      reduce using rule 93 (factor -> NUMBER .)
    PLUSPLUS        reduce using rule 93 (factor -> NUMBER .)
    TIMES           reduce using rule 93 (factor -> NUMBER .)
    DIVIDE          reduce using rule 93 (factor -> NUMBER .)
    LESS            reduce using rule 93 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 93 (factor -> NUMBER .)
    GREATER         reduce using rule 93 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 93 (factor -> NUMBER .)
    DEQUAL          reduce using rule 93 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 93 (factor -> NUMBER .)
    PLUS            reduce using rule 93 (factor -> NUMBER .)
    MINUS           reduce using rule 93 (factor -> NUMBER .)
    RPAREN          reduce using rule 93 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 93 (factor -> NUMBER .)
    RBRACKET        reduce using rule 93 (factor -> NUMBER .)
    COMMA           reduce using rule 93 (factor -> NUMBER .)


state 64

    (94) factor -> boolean .

    MINUSMINUS      reduce using rule 94 (factor -> boolean .)
    PLUSPLUS        reduce using rule 94 (factor -> boolean .)
    TIMES           reduce using rule 94 (factor -> boolean .)
    DIVIDE          reduce using rule 94 (factor -> boolean .)
    LESS            reduce using rule 94 (factor -> boolean .)
    LESSEQUAL       reduce using rule 94 (factor -> boolean .)
    GREATER         reduce using rule 94 (factor -> boolean .)
    GREATEREQUAL    reduce using rule 94 (factor -> boolean .)
    DEQUAL          reduce using rule 94 (factor -> boolean .)
    ISEQUAL         reduce using rule 94 (factor -> boolean .)
    PLUS            reduce using rule 94 (factor -> boolean .)
    MINUS           reduce using rule 94 (factor -> boolean .)
    RPAREN          reduce using rule 94 (factor -> boolean .)
    SEMICOLON       reduce using rule 94 (factor -> boolean .)
    RBRACKET        reduce using rule 94 (factor -> boolean .)
    COMMA           reduce using rule 94 (factor -> boolean .)


state 65

    (58) selection_stmt -> SWITCH LPAREN var . RPAREN statement

    RPAREN          shift and go to state 119


state 66

    (70) var -> ID .
    (71) var -> ID . LBRACKET expression RBRACKET

    RPAREN          reduce using rule 70 (var -> ID .)
    LBRACKET        shift and go to state 102


state 67

    (59) selection_stmt -> CASE NUMBER COLON . statement BREAK SEMICOLON
    (49) statement -> . expression_stmt
    (50) statement -> . compount_stmt
    (51) statement -> . selection_stmt
    (52) statement -> . iteration_stmt
    (53) statement -> . return_stmt
    (54) expression_stmt -> . expression SEMICOLON
    (55) expression_stmt -> . SEMICOLON
    (44) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (56) selection_stmt -> . IF LPAREN expression RPAREN statement
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . print_stmt
    (62) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (63) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (64) iteration_stmt -> . print_stmt
    (65) return_stmt -> . RETURN SEMICOLON
    (66) return_stmt -> . RETURN expression SEMICOLON
    (67) expression -> . var EQUAL expression
    (68) expression -> . simple_expression
    (69) expression -> . var EQUAL AMPERSANT ID
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (72) simple_expression -> . additive_expression relop additive_expression
    (73) simple_expression -> . additive_expression
    (102) empty -> .
    (80) additive_expression -> . additive_expression addop term
    (81) additive_expression -> . term
    (82) additive_expression -> . term MINUSMINUS
    (83) additive_expression -> . term PLUSPLUS
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

    SEMICOLON       shift and go to state 69
    LBLOCK          shift and go to state 76
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 78
    ID              shift and go to state 58
    ECHO            reduce using rule 102 (empty -> .)
    BREAK           reduce using rule 102 (empty -> .)
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    statement                      shift and go to state 120
    expression_stmt                shift and go to state 70
    compount_stmt                  shift and go to state 71
    selection_stmt                 shift and go to state 72
    iteration_stmt                 shift and go to state 73
    return_stmt                    shift and go to state 74
    expression                     shift and go to state 75
    print_stmt                     shift and go to state 77
    var                            shift and go to state 56
    additive_expression            shift and go to state 59
    simple_expression              shift and go to state 57
    empty                          shift and go to state 17
    term                           shift and go to state 60
    factor                         shift and go to state 61
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 68

    (60) selection_stmt -> DEFAULT COLON statement . BREAK SEMICOLON

    BREAK           shift and go to state 121


state 69

    (55) expression_stmt -> SEMICOLON .

    BREAK           reduce using rule 55 (expression_stmt -> SEMICOLON .)
    ELSE            reduce using rule 55 (expression_stmt -> SEMICOLON .)
    CLOSE_TAG       reduce using rule 55 (expression_stmt -> SEMICOLON .)
    ID              reduce using rule 55 (expression_stmt -> SEMICOLON .)
    AMPERSANT       reduce using rule 55 (expression_stmt -> SEMICOLON .)
    FUNCTION        reduce using rule 55 (expression_stmt -> SEMICOLON .)
    REQUIRE         reduce using rule 55 (expression_stmt -> SEMICOLON .)
    CLASS           reduce using rule 55 (expression_stmt -> SEMICOLON .)
    IF              reduce using rule 55 (expression_stmt -> SEMICOLON .)
    SWITCH          reduce using rule 55 (expression_stmt -> SEMICOLON .)
    CASE            reduce using rule 55 (expression_stmt -> SEMICOLON .)
    DEFAULT         reduce using rule 55 (expression_stmt -> SEMICOLON .)
    FOR             reduce using rule 55 (expression_stmt -> SEMICOLON .)
    WHILE           reduce using rule 55 (expression_stmt -> SEMICOLON .)
    ECHO            reduce using rule 55 (expression_stmt -> SEMICOLON .)
    SEMICOLON       reduce using rule 55 (expression_stmt -> SEMICOLON .)
    LBLOCK          reduce using rule 55 (expression_stmt -> SEMICOLON .)
    RETURN          reduce using rule 55 (expression_stmt -> SEMICOLON .)
    LPAREN          reduce using rule 55 (expression_stmt -> SEMICOLON .)
    NUMBER          reduce using rule 55 (expression_stmt -> SEMICOLON .)
    TRUE            reduce using rule 55 (expression_stmt -> SEMICOLON .)
    FALSE           reduce using rule 55 (expression_stmt -> SEMICOLON .)
    RBLOCK          reduce using rule 55 (expression_stmt -> SEMICOLON .)


state 70

    (49) statement -> expression_stmt .

    BREAK           reduce using rule 49 (statement -> expression_stmt .)
    ELSE            reduce using rule 49 (statement -> expression_stmt .)
    CLOSE_TAG       reduce using rule 49 (statement -> expression_stmt .)
    ID              reduce using rule 49 (statement -> expression_stmt .)
    AMPERSANT       reduce using rule 49 (statement -> expression_stmt .)
    FUNCTION        reduce using rule 49 (statement -> expression_stmt .)
    REQUIRE         reduce using rule 49 (statement -> expression_stmt .)
    CLASS           reduce using rule 49 (statement -> expression_stmt .)
    IF              reduce using rule 49 (statement -> expression_stmt .)
    SWITCH          reduce using rule 49 (statement -> expression_stmt .)
    CASE            reduce using rule 49 (statement -> expression_stmt .)
    DEFAULT         reduce using rule 49 (statement -> expression_stmt .)
    FOR             reduce using rule 49 (statement -> expression_stmt .)
    WHILE           reduce using rule 49 (statement -> expression_stmt .)
    ECHO            reduce using rule 49 (statement -> expression_stmt .)
    SEMICOLON       reduce using rule 49 (statement -> expression_stmt .)
    LBLOCK          reduce using rule 49 (statement -> expression_stmt .)
    RETURN          reduce using rule 49 (statement -> expression_stmt .)
    LPAREN          reduce using rule 49 (statement -> expression_stmt .)
    NUMBER          reduce using rule 49 (statement -> expression_stmt .)
    TRUE            reduce using rule 49 (statement -> expression_stmt .)
    FALSE           reduce using rule 49 (statement -> expression_stmt .)
    RBLOCK          reduce using rule 49 (statement -> expression_stmt .)


state 71

    (50) statement -> compount_stmt .

    BREAK           reduce using rule 50 (statement -> compount_stmt .)
    ELSE            reduce using rule 50 (statement -> compount_stmt .)
    CLOSE_TAG       reduce using rule 50 (statement -> compount_stmt .)
    ID              reduce using rule 50 (statement -> compount_stmt .)
    AMPERSANT       reduce using rule 50 (statement -> compount_stmt .)
    FUNCTION        reduce using rule 50 (statement -> compount_stmt .)
    REQUIRE         reduce using rule 50 (statement -> compount_stmt .)
    CLASS           reduce using rule 50 (statement -> compount_stmt .)
    IF              reduce using rule 50 (statement -> compount_stmt .)
    SWITCH          reduce using rule 50 (statement -> compount_stmt .)
    CASE            reduce using rule 50 (statement -> compount_stmt .)
    DEFAULT         reduce using rule 50 (statement -> compount_stmt .)
    FOR             reduce using rule 50 (statement -> compount_stmt .)
    WHILE           reduce using rule 50 (statement -> compount_stmt .)
    ECHO            reduce using rule 50 (statement -> compount_stmt .)
    SEMICOLON       reduce using rule 50 (statement -> compount_stmt .)
    LBLOCK          reduce using rule 50 (statement -> compount_stmt .)
    RETURN          reduce using rule 50 (statement -> compount_stmt .)
    LPAREN          reduce using rule 50 (statement -> compount_stmt .)
    NUMBER          reduce using rule 50 (statement -> compount_stmt .)
    TRUE            reduce using rule 50 (statement -> compount_stmt .)
    FALSE           reduce using rule 50 (statement -> compount_stmt .)
    RBLOCK          reduce using rule 50 (statement -> compount_stmt .)


state 72

    (51) statement -> selection_stmt .

    BREAK           reduce using rule 51 (statement -> selection_stmt .)
    ELSE            reduce using rule 51 (statement -> selection_stmt .)
    CLOSE_TAG       reduce using rule 51 (statement -> selection_stmt .)
    ID              reduce using rule 51 (statement -> selection_stmt .)
    AMPERSANT       reduce using rule 51 (statement -> selection_stmt .)
    FUNCTION        reduce using rule 51 (statement -> selection_stmt .)
    REQUIRE         reduce using rule 51 (statement -> selection_stmt .)
    CLASS           reduce using rule 51 (statement -> selection_stmt .)
    IF              reduce using rule 51 (statement -> selection_stmt .)
    SWITCH          reduce using rule 51 (statement -> selection_stmt .)
    CASE            reduce using rule 51 (statement -> selection_stmt .)
    DEFAULT         reduce using rule 51 (statement -> selection_stmt .)
    FOR             reduce using rule 51 (statement -> selection_stmt .)
    WHILE           reduce using rule 51 (statement -> selection_stmt .)
    ECHO            reduce using rule 51 (statement -> selection_stmt .)
    SEMICOLON       reduce using rule 51 (statement -> selection_stmt .)
    LBLOCK          reduce using rule 51 (statement -> selection_stmt .)
    RETURN          reduce using rule 51 (statement -> selection_stmt .)
    LPAREN          reduce using rule 51 (statement -> selection_stmt .)
    NUMBER          reduce using rule 51 (statement -> selection_stmt .)
    TRUE            reduce using rule 51 (statement -> selection_stmt .)
    FALSE           reduce using rule 51 (statement -> selection_stmt .)
    RBLOCK          reduce using rule 51 (statement -> selection_stmt .)


state 73

    (52) statement -> iteration_stmt .

    BREAK           reduce using rule 52 (statement -> iteration_stmt .)
    ELSE            reduce using rule 52 (statement -> iteration_stmt .)
    CLOSE_TAG       reduce using rule 52 (statement -> iteration_stmt .)
    ID              reduce using rule 52 (statement -> iteration_stmt .)
    AMPERSANT       reduce using rule 52 (statement -> iteration_stmt .)
    FUNCTION        reduce using rule 52 (statement -> iteration_stmt .)
    REQUIRE         reduce using rule 52 (statement -> iteration_stmt .)
    CLASS           reduce using rule 52 (statement -> iteration_stmt .)
    IF              reduce using rule 52 (statement -> iteration_stmt .)
    SWITCH          reduce using rule 52 (statement -> iteration_stmt .)
    CASE            reduce using rule 52 (statement -> iteration_stmt .)
    DEFAULT         reduce using rule 52 (statement -> iteration_stmt .)
    FOR             reduce using rule 52 (statement -> iteration_stmt .)
    WHILE           reduce using rule 52 (statement -> iteration_stmt .)
    ECHO            reduce using rule 52 (statement -> iteration_stmt .)
    SEMICOLON       reduce using rule 52 (statement -> iteration_stmt .)
    LBLOCK          reduce using rule 52 (statement -> iteration_stmt .)
    RETURN          reduce using rule 52 (statement -> iteration_stmt .)
    LPAREN          reduce using rule 52 (statement -> iteration_stmt .)
    NUMBER          reduce using rule 52 (statement -> iteration_stmt .)
    TRUE            reduce using rule 52 (statement -> iteration_stmt .)
    FALSE           reduce using rule 52 (statement -> iteration_stmt .)
    RBLOCK          reduce using rule 52 (statement -> iteration_stmt .)


state 74

    (53) statement -> return_stmt .

    BREAK           reduce using rule 53 (statement -> return_stmt .)
    ELSE            reduce using rule 53 (statement -> return_stmt .)
    CLOSE_TAG       reduce using rule 53 (statement -> return_stmt .)
    ID              reduce using rule 53 (statement -> return_stmt .)
    AMPERSANT       reduce using rule 53 (statement -> return_stmt .)
    FUNCTION        reduce using rule 53 (statement -> return_stmt .)
    REQUIRE         reduce using rule 53 (statement -> return_stmt .)
    CLASS           reduce using rule 53 (statement -> return_stmt .)
    IF              reduce using rule 53 (statement -> return_stmt .)
    SWITCH          reduce using rule 53 (statement -> return_stmt .)
    CASE            reduce using rule 53 (statement -> return_stmt .)
    DEFAULT         reduce using rule 53 (statement -> return_stmt .)
    FOR             reduce using rule 53 (statement -> return_stmt .)
    WHILE           reduce using rule 53 (statement -> return_stmt .)
    ECHO            reduce using rule 53 (statement -> return_stmt .)
    SEMICOLON       reduce using rule 53 (statement -> return_stmt .)
    LBLOCK          reduce using rule 53 (statement -> return_stmt .)
    RETURN          reduce using rule 53 (statement -> return_stmt .)
    LPAREN          reduce using rule 53 (statement -> return_stmt .)
    NUMBER          reduce using rule 53 (statement -> return_stmt .)
    TRUE            reduce using rule 53 (statement -> return_stmt .)
    FALSE           reduce using rule 53 (statement -> return_stmt .)
    RBLOCK          reduce using rule 53 (statement -> return_stmt .)


state 75

    (54) expression_stmt -> expression . SEMICOLON

    SEMICOLON       shift and go to state 122


state 76

    (44) compount_stmt -> LBLOCK . print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (102) empty -> .

    ECHO            reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    AMPERSANT       reduce using rule 102 (empty -> .)
    SEMICOLON       reduce using rule 102 (empty -> .)
    LBLOCK          reduce using rule 102 (empty -> .)
    IF              reduce using rule 102 (empty -> .)
    SWITCH          reduce using rule 102 (empty -> .)
    CASE            reduce using rule 102 (empty -> .)
    DEFAULT         reduce using rule 102 (empty -> .)
    FOR             reduce using rule 102 (empty -> .)
    WHILE           reduce using rule 102 (empty -> .)
    RETURN          reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    NUMBER          reduce using rule 102 (empty -> .)
    TRUE            reduce using rule 102 (empty -> .)
    FALSE           reduce using rule 102 (empty -> .)
    RBLOCK          reduce using rule 102 (empty -> .)

    print_stmt                     shift and go to state 123
    empty                          shift and go to state 17

state 77

    (61) selection_stmt -> print_stmt .
    (64) iteration_stmt -> print_stmt .
    (11) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (12) print_stmt -> print_stmt . ECHO ID SEMICOLON

  ! reduce/reduce conflict for BREAK resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for ELSE resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for ID resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for CLASS resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for ECHO resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for LBLOCK resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for RETURN resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for LPAREN resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for NUMBER resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for TRUE resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FALSE resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for RBLOCK resolved using rule 61 (selection_stmt -> print_stmt .)
  ! shift/reduce conflict for ECHO resolved as shift
    BREAK           reduce using rule 61 (selection_stmt -> print_stmt .)
    ELSE            reduce using rule 61 (selection_stmt -> print_stmt .)
    CLOSE_TAG       reduce using rule 61 (selection_stmt -> print_stmt .)
    ID              reduce using rule 61 (selection_stmt -> print_stmt .)
    AMPERSANT       reduce using rule 61 (selection_stmt -> print_stmt .)
    FUNCTION        reduce using rule 61 (selection_stmt -> print_stmt .)
    REQUIRE         reduce using rule 61 (selection_stmt -> print_stmt .)
    CLASS           reduce using rule 61 (selection_stmt -> print_stmt .)
    IF              reduce using rule 61 (selection_stmt -> print_stmt .)
    SWITCH          reduce using rule 61 (selection_stmt -> print_stmt .)
    CASE            reduce using rule 61 (selection_stmt -> print_stmt .)
    DEFAULT         reduce using rule 61 (selection_stmt -> print_stmt .)
    FOR             reduce using rule 61 (selection_stmt -> print_stmt .)
    WHILE           reduce using rule 61 (selection_stmt -> print_stmt .)
    SEMICOLON       reduce using rule 61 (selection_stmt -> print_stmt .)
    LBLOCK          reduce using rule 61 (selection_stmt -> print_stmt .)
    RETURN          reduce using rule 61 (selection_stmt -> print_stmt .)
    LPAREN          reduce using rule 61 (selection_stmt -> print_stmt .)
    NUMBER          reduce using rule 61 (selection_stmt -> print_stmt .)
    TRUE            reduce using rule 61 (selection_stmt -> print_stmt .)
    FALSE           reduce using rule 61 (selection_stmt -> print_stmt .)
    RBLOCK          reduce using rule 61 (selection_stmt -> print_stmt .)
    ECHO            shift and go to state 26

  ! ECHO            [ reduce using rule 61 (selection_stmt -> print_stmt .) ]
  ! BREAK           [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! ELSE            [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! CLOSE_TAG       [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! ID              [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! AMPERSANT       [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! FUNCTION        [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! REQUIRE         [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! CLASS           [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! IF              [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! SWITCH          [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! CASE            [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! DEFAULT         [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! FOR             [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! WHILE           [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! SEMICOLON       [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! LBLOCK          [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! RETURN          [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! LPAREN          [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! NUMBER          [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! TRUE            [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! FALSE           [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! RBLOCK          [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]


state 78

    (65) return_stmt -> RETURN . SEMICOLON
    (66) return_stmt -> RETURN . expression SEMICOLON
    (67) expression -> . var EQUAL expression
    (68) expression -> . simple_expression
    (69) expression -> . var EQUAL AMPERSANT ID
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (72) simple_expression -> . additive_expression relop additive_expression
    (73) simple_expression -> . additive_expression
    (80) additive_expression -> . additive_expression addop term
    (81) additive_expression -> . term
    (82) additive_expression -> . term MINUSMINUS
    (83) additive_expression -> . term PLUSPLUS
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

    SEMICOLON       shift and go to state 124
    ID              shift and go to state 58
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    expression                     shift and go to state 125
    var                            shift and go to state 56
    simple_expression              shift and go to state 57
    additive_expression            shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 79

    (62) iteration_stmt -> FOR LPAREN var_declaration . SEMICOLON expression SEMICOLON additive_expression RPAREN statement

    SEMICOLON       shift and go to state 126


state 80

    (63) iteration_stmt -> WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 127


state 81

    (11) print_stmt -> print_stmt ECHO STRING SEMICOLON .

    ECHO            reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    CLOSE_TAG       reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    ID              reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    AMPERSANT       reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    FUNCTION        reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    REQUIRE         reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    CLASS           reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    IF              reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    SWITCH          reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    CASE            reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    DEFAULT         reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    FOR             reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    WHILE           reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    BREAK           reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    SEMICOLON       reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    LBLOCK          reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    RETURN          reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    LPAREN          reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    NUMBER          reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    TRUE            reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    FALSE           reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    RBLOCK          reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    ELSE            reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)


state 82

    (12) print_stmt -> print_stmt ECHO ID SEMICOLON .

    ECHO            reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    CLOSE_TAG       reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    ID              reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    AMPERSANT       reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    FUNCTION        reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    REQUIRE         reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    CLASS           reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    IF              reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    SWITCH          reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    CASE            reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    DEFAULT         reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    FOR             reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    WHILE           reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    BREAK           reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    SEMICOLON       reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    LBLOCK          reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    RETURN          reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    LPAREN          reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    NUMBER          reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    TRUE            reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    FALSE           reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    RBLOCK          reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    ELSE            reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)


state 83

    (33) var_declaration -> ID EQUAL ID SEMICOLON . var_declaration
    (34) var_declaration -> ID EQUAL ID SEMICOLON .
    (27) var_declaration -> . ID SEMICOLON var_declaration
    (28) var_declaration -> . ID SEMICOLON
    (29) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (31) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (36) var_declaration -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSE_TAG       reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    FUNCTION        reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    REQUIRE         reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    CLASS           reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    IF              reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    SWITCH          reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    CASE            reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    DEFAULT         reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    FOR             reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    WHILE           reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    ECHO            reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    SEMICOLON       reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    RBLOCK          reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    PRIVATE         reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    PUBLIC          reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    PROTECTED       reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    LBLOCK          reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    RETURN          reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    LPAREN          reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    NUMBER          reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    TRUE            reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    FALSE           reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .)
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

  ! ID              [ reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON .) ]

    var_declaration                shift and go to state 128

state 84

    (29) var_declaration -> ID EQUAL NUMBER SEMICOLON . var_declaration
    (30) var_declaration -> ID EQUAL NUMBER SEMICOLON .
    (27) var_declaration -> . ID SEMICOLON var_declaration
    (28) var_declaration -> . ID SEMICOLON
    (29) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (31) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (36) var_declaration -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSE_TAG       reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    FUNCTION        reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    REQUIRE         reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    CLASS           reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    IF              reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    SWITCH          reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    CASE            reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    DEFAULT         reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    FOR             reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    WHILE           reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    ECHO            reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    SEMICOLON       reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    RBLOCK          reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    PRIVATE         reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    PUBLIC          reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    PROTECTED       reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    LBLOCK          reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    RETURN          reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    LPAREN          reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    NUMBER          reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    TRUE            reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    FALSE           reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

  ! ID              [ reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON .) ]

    var_declaration                shift and go to state 129

state 85

    (31) var_declaration -> ID EQUAL boolean SEMICOLON . var_declaration
    (32) var_declaration -> ID EQUAL boolean SEMICOLON .
    (27) var_declaration -> . ID SEMICOLON var_declaration
    (28) var_declaration -> . ID SEMICOLON
    (29) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (31) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (36) var_declaration -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSE_TAG       reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    FUNCTION        reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    REQUIRE         reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    CLASS           reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    IF              reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    SWITCH          reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    CASE            reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    DEFAULT         reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    FOR             reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    WHILE           reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    ECHO            reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    SEMICOLON       reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    RBLOCK          reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    PRIVATE         reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    PUBLIC          reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    PROTECTED       reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    LBLOCK          reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    RETURN          reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    LPAREN          reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    NUMBER          reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    TRUE            reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    FALSE           reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

  ! ID              [ reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON .) ]

    var_declaration                shift and go to state 130

state 86

    (35) var_declaration -> AMPERSANT ID SEMICOLON var_declaration .

    CLOSE_TAG       reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    ID              reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    CLASS           reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    IF              reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    SWITCH          reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    CASE            reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    FOR             reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    WHILE           reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    ECHO            reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    RETURN          reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    LPAREN          reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    NUMBER          reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    TRUE            reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    FALSE           reduce using rule 35 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)


state 87

    (37) fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params . RPAREN compount_stmt

    RPAREN          shift and go to state 131


state 88

    (38) params -> param_list .
    (40) param_list -> param_list . COMMA param

    RPAREN          reduce using rule 38 (params -> param_list .)
    COMMA           shift and go to state 132


state 89

    (39) params -> empty .

    RPAREN          reduce using rule 39 (params -> empty .)


state 90

    (41) param_list -> param .

    COMMA           reduce using rule 41 (param_list -> param .)
    RPAREN          reduce using rule 41 (param_list -> param .)


state 91

    (42) param -> ID .
    (43) param -> ID . LBRACKET RBRACKET

    COMMA           reduce using rule 42 (param -> ID .)
    RPAREN          reduce using rule 42 (param -> ID .)
    LBRACKET        shift and go to state 133


state 92

    (14) header_declaration -> REQUIRE LPAREN STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 134


state 93

    (17) class_stmt -> LBLOCK attributes . methods RBLOCK
    (19) class_stmt -> LBLOCK attributes . RBLOCK
    (20) attributes -> attributes . scope var_declaration
    (22) methods -> . methods scope fun_declaration
    (23) methods -> . scope fun_declaration
    (24) scope -> . PRIVATE
    (25) scope -> . PUBLIC
    (26) scope -> . PROTECTED

    RBLOCK          shift and go to state 136
    PRIVATE         shift and go to state 96
    PUBLIC          shift and go to state 97
    PROTECTED       shift and go to state 98

    methods                        shift and go to state 135
    scope                          shift and go to state 137

state 94

    (18) class_stmt -> LBLOCK empty . RBLOCK

    RBLOCK          shift and go to state 138


state 95

    (21) attributes -> scope . var_declaration
    (27) var_declaration -> . ID SEMICOLON var_declaration
    (28) var_declaration -> . ID SEMICOLON
    (29) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (31) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (36) var_declaration -> . AMPERSANT ID SEMICOLON

    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

    var_declaration                shift and go to state 139

state 96

    (24) scope -> PRIVATE .

    ID              reduce using rule 24 (scope -> PRIVATE .)
    AMPERSANT       reduce using rule 24 (scope -> PRIVATE .)
    FUNCTION        reduce using rule 24 (scope -> PRIVATE .)


state 97

    (25) scope -> PUBLIC .

    ID              reduce using rule 25 (scope -> PUBLIC .)
    AMPERSANT       reduce using rule 25 (scope -> PUBLIC .)
    FUNCTION        reduce using rule 25 (scope -> PUBLIC .)


state 98

    (26) scope -> PROTECTED .

    ID              reduce using rule 26 (scope -> PROTECTED .)
    AMPERSANT       reduce using rule 26 (scope -> PROTECTED .)
    FUNCTION        reduce using rule 26 (scope -> PROTECTED .)


state 99

    (90) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 140


state 100

    (56) selection_stmt -> IF LPAREN expression RPAREN . statement
    (57) selection_stmt -> IF LPAREN expression RPAREN . statement ELSE statement
    (49) statement -> . expression_stmt
    (50) statement -> . compount_stmt
    (51) statement -> . selection_stmt
    (52) statement -> . iteration_stmt
    (53) statement -> . return_stmt
    (54) expression_stmt -> . expression SEMICOLON
    (55) expression_stmt -> . SEMICOLON
    (44) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (56) selection_stmt -> . IF LPAREN expression RPAREN statement
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . print_stmt
    (62) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (63) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (64) iteration_stmt -> . print_stmt
    (65) return_stmt -> . RETURN SEMICOLON
    (66) return_stmt -> . RETURN expression SEMICOLON
    (67) expression -> . var EQUAL expression
    (68) expression -> . simple_expression
    (69) expression -> . var EQUAL AMPERSANT ID
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (72) simple_expression -> . additive_expression relop additive_expression
    (73) simple_expression -> . additive_expression
    (102) empty -> .
    (80) additive_expression -> . additive_expression addop term
    (81) additive_expression -> . term
    (82) additive_expression -> . term MINUSMINUS
    (83) additive_expression -> . term PLUSPLUS
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 69
    LBLOCK          shift and go to state 76
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 78
    ID              shift and go to state 58
    ECHO            reduce using rule 102 (empty -> .)
    ELSE            reduce using rule 102 (empty -> .)
    CLOSE_TAG       reduce using rule 102 (empty -> .)
    AMPERSANT       reduce using rule 102 (empty -> .)
    FUNCTION        reduce using rule 102 (empty -> .)
    REQUIRE         reduce using rule 102 (empty -> .)
    CLASS           reduce using rule 102 (empty -> .)
    BREAK           reduce using rule 102 (empty -> .)
    RBLOCK          reduce using rule 102 (empty -> .)
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

  ! ID              [ reduce using rule 102 (empty -> .) ]
  ! IF              [ reduce using rule 102 (empty -> .) ]
  ! SWITCH          [ reduce using rule 102 (empty -> .) ]
  ! CASE            [ reduce using rule 102 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 102 (empty -> .) ]
  ! FOR             [ reduce using rule 102 (empty -> .) ]
  ! WHILE           [ reduce using rule 102 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 102 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 102 (empty -> .) ]
  ! RETURN          [ reduce using rule 102 (empty -> .) ]
  ! LPAREN          [ reduce using rule 102 (empty -> .) ]
  ! NUMBER          [ reduce using rule 102 (empty -> .) ]
  ! TRUE            [ reduce using rule 102 (empty -> .) ]
  ! FALSE           [ reduce using rule 102 (empty -> .) ]

    expression                     shift and go to state 75
    statement                      shift and go to state 141
    expression_stmt                shift and go to state 70
    compount_stmt                  shift and go to state 71
    selection_stmt                 shift and go to state 72
    iteration_stmt                 shift and go to state 73
    return_stmt                    shift and go to state 74
    print_stmt                     shift and go to state 77
    var                            shift and go to state 56
    additive_expression            shift and go to state 59
    simple_expression              shift and go to state 57
    empty                          shift and go to state 17
    term                           shift and go to state 60
    factor                         shift and go to state 61
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 101

    (67) expression -> var EQUAL . expression
    (69) expression -> var EQUAL . AMPERSANT ID
    (67) expression -> . var EQUAL expression
    (68) expression -> . simple_expression
    (69) expression -> . var EQUAL AMPERSANT ID
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (72) simple_expression -> . additive_expression relop additive_expression
    (73) simple_expression -> . additive_expression
    (80) additive_expression -> . additive_expression addop term
    (81) additive_expression -> . term
    (82) additive_expression -> . term MINUSMINUS
    (83) additive_expression -> . term PLUSPLUS
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

    AMPERSANT       shift and go to state 143
    ID              shift and go to state 58
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    var                            shift and go to state 56
    expression                     shift and go to state 142
    simple_expression              shift and go to state 57
    additive_expression            shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 102

    (71) var -> ID LBRACKET . expression RBRACKET
    (67) expression -> . var EQUAL expression
    (68) expression -> . simple_expression
    (69) expression -> . var EQUAL AMPERSANT ID
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (72) simple_expression -> . additive_expression relop additive_expression
    (73) simple_expression -> . additive_expression
    (80) additive_expression -> . additive_expression addop term
    (81) additive_expression -> . term
    (82) additive_expression -> . term MINUSMINUS
    (83) additive_expression -> . term PLUSPLUS
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

    ID              shift and go to state 58
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    expression                     shift and go to state 144
    var                            shift and go to state 56
    simple_expression              shift and go to state 57
    additive_expression            shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 103

    (95) call -> ID LPAREN . args RPAREN
    (96) args -> . args_list
    (97) args -> . empty
    (98) args_list -> . args_list COMMA expression
    (99) args_list -> . expression
    (102) empty -> .
    (67) expression -> . var EQUAL expression
    (68) expression -> . simple_expression
    (69) expression -> . var EQUAL AMPERSANT ID
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (72) simple_expression -> . additive_expression relop additive_expression
    (73) simple_expression -> . additive_expression
    (80) additive_expression -> . additive_expression addop term
    (81) additive_expression -> . term
    (82) additive_expression -> . term MINUSMINUS
    (83) additive_expression -> . term PLUSPLUS
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

    RPAREN          reduce using rule 102 (empty -> .)
    ID              shift and go to state 58
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    args                           shift and go to state 145
    args_list                      shift and go to state 146
    empty                          shift and go to state 147
    expression                     shift and go to state 148
    var                            shift and go to state 56
    simple_expression              shift and go to state 57
    additive_expression            shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 104

    (72) simple_expression -> additive_expression relop . additive_expression
    (80) additive_expression -> . additive_expression addop term
    (81) additive_expression -> . term
    (82) additive_expression -> . term MINUSMINUS
    (83) additive_expression -> . term PLUSPLUS
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    ID              shift and go to state 58
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    additive_expression            shift and go to state 149
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var                            shift and go to state 150
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 105

    (80) additive_expression -> additive_expression addop . term
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    ID              shift and go to state 58
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    term                           shift and go to state 151
    factor                         shift and go to state 61
    var                            shift and go to state 150
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 106

    (74) relop -> LESS .

    LPAREN          reduce using rule 74 (relop -> LESS .)
    NUMBER          reduce using rule 74 (relop -> LESS .)
    ID              reduce using rule 74 (relop -> LESS .)
    TRUE            reduce using rule 74 (relop -> LESS .)
    FALSE           reduce using rule 74 (relop -> LESS .)


state 107

    (75) relop -> LESSEQUAL .

    LPAREN          reduce using rule 75 (relop -> LESSEQUAL .)
    NUMBER          reduce using rule 75 (relop -> LESSEQUAL .)
    ID              reduce using rule 75 (relop -> LESSEQUAL .)
    TRUE            reduce using rule 75 (relop -> LESSEQUAL .)
    FALSE           reduce using rule 75 (relop -> LESSEQUAL .)


state 108

    (76) relop -> GREATER .

    LPAREN          reduce using rule 76 (relop -> GREATER .)
    NUMBER          reduce using rule 76 (relop -> GREATER .)
    ID              reduce using rule 76 (relop -> GREATER .)
    TRUE            reduce using rule 76 (relop -> GREATER .)
    FALSE           reduce using rule 76 (relop -> GREATER .)


state 109

    (77) relop -> GREATEREQUAL .

    LPAREN          reduce using rule 77 (relop -> GREATEREQUAL .)
    NUMBER          reduce using rule 77 (relop -> GREATEREQUAL .)
    ID              reduce using rule 77 (relop -> GREATEREQUAL .)
    TRUE            reduce using rule 77 (relop -> GREATEREQUAL .)
    FALSE           reduce using rule 77 (relop -> GREATEREQUAL .)


state 110

    (78) relop -> DEQUAL .

    LPAREN          reduce using rule 78 (relop -> DEQUAL .)
    NUMBER          reduce using rule 78 (relop -> DEQUAL .)
    ID              reduce using rule 78 (relop -> DEQUAL .)
    TRUE            reduce using rule 78 (relop -> DEQUAL .)
    FALSE           reduce using rule 78 (relop -> DEQUAL .)


state 111

    (79) relop -> ISEQUAL .

    LPAREN          reduce using rule 79 (relop -> ISEQUAL .)
    NUMBER          reduce using rule 79 (relop -> ISEQUAL .)
    ID              reduce using rule 79 (relop -> ISEQUAL .)
    TRUE            reduce using rule 79 (relop -> ISEQUAL .)
    FALSE           reduce using rule 79 (relop -> ISEQUAL .)


state 112

    (84) addop -> PLUS .

    LPAREN          reduce using rule 84 (addop -> PLUS .)
    NUMBER          reduce using rule 84 (addop -> PLUS .)
    ID              reduce using rule 84 (addop -> PLUS .)
    TRUE            reduce using rule 84 (addop -> PLUS .)
    FALSE           reduce using rule 84 (addop -> PLUS .)


state 113

    (85) addop -> MINUS .

    LPAREN          reduce using rule 85 (addop -> MINUS .)
    NUMBER          reduce using rule 85 (addop -> MINUS .)
    ID              reduce using rule 85 (addop -> MINUS .)
    TRUE            reduce using rule 85 (addop -> MINUS .)
    FALSE           reduce using rule 85 (addop -> MINUS .)


state 114

    (82) additive_expression -> term MINUSMINUS .

    LESS            reduce using rule 82 (additive_expression -> term MINUSMINUS .)
    LESSEQUAL       reduce using rule 82 (additive_expression -> term MINUSMINUS .)
    GREATER         reduce using rule 82 (additive_expression -> term MINUSMINUS .)
    GREATEREQUAL    reduce using rule 82 (additive_expression -> term MINUSMINUS .)
    DEQUAL          reduce using rule 82 (additive_expression -> term MINUSMINUS .)
    ISEQUAL         reduce using rule 82 (additive_expression -> term MINUSMINUS .)
    PLUS            reduce using rule 82 (additive_expression -> term MINUSMINUS .)
    MINUS           reduce using rule 82 (additive_expression -> term MINUSMINUS .)
    RPAREN          reduce using rule 82 (additive_expression -> term MINUSMINUS .)
    SEMICOLON       reduce using rule 82 (additive_expression -> term MINUSMINUS .)
    RBRACKET        reduce using rule 82 (additive_expression -> term MINUSMINUS .)
    COMMA           reduce using rule 82 (additive_expression -> term MINUSMINUS .)


state 115

    (83) additive_expression -> term PLUSPLUS .

    LESS            reduce using rule 83 (additive_expression -> term PLUSPLUS .)
    LESSEQUAL       reduce using rule 83 (additive_expression -> term PLUSPLUS .)
    GREATER         reduce using rule 83 (additive_expression -> term PLUSPLUS .)
    GREATEREQUAL    reduce using rule 83 (additive_expression -> term PLUSPLUS .)
    DEQUAL          reduce using rule 83 (additive_expression -> term PLUSPLUS .)
    ISEQUAL         reduce using rule 83 (additive_expression -> term PLUSPLUS .)
    PLUS            reduce using rule 83 (additive_expression -> term PLUSPLUS .)
    MINUS           reduce using rule 83 (additive_expression -> term PLUSPLUS .)
    RPAREN          reduce using rule 83 (additive_expression -> term PLUSPLUS .)
    SEMICOLON       reduce using rule 83 (additive_expression -> term PLUSPLUS .)
    RBRACKET        reduce using rule 83 (additive_expression -> term PLUSPLUS .)
    COMMA           reduce using rule 83 (additive_expression -> term PLUSPLUS .)


state 116

    (86) term -> term mulop . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    ID              shift and go to state 58
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    factor                         shift and go to state 152
    var                            shift and go to state 150
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 117

    (88) mulop -> TIMES .

    LPAREN          reduce using rule 88 (mulop -> TIMES .)
    NUMBER          reduce using rule 88 (mulop -> TIMES .)
    ID              reduce using rule 88 (mulop -> TIMES .)
    TRUE            reduce using rule 88 (mulop -> TIMES .)
    FALSE           reduce using rule 88 (mulop -> TIMES .)


state 118

    (89) mulop -> DIVIDE .

    LPAREN          reduce using rule 89 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 89 (mulop -> DIVIDE .)
    ID              reduce using rule 89 (mulop -> DIVIDE .)
    TRUE            reduce using rule 89 (mulop -> DIVIDE .)
    FALSE           reduce using rule 89 (mulop -> DIVIDE .)


state 119

    (58) selection_stmt -> SWITCH LPAREN var RPAREN . statement
    (49) statement -> . expression_stmt
    (50) statement -> . compount_stmt
    (51) statement -> . selection_stmt
    (52) statement -> . iteration_stmt
    (53) statement -> . return_stmt
    (54) expression_stmt -> . expression SEMICOLON
    (55) expression_stmt -> . SEMICOLON
    (44) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (56) selection_stmt -> . IF LPAREN expression RPAREN statement
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . print_stmt
    (62) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (63) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (64) iteration_stmt -> . print_stmt
    (65) return_stmt -> . RETURN SEMICOLON
    (66) return_stmt -> . RETURN expression SEMICOLON
    (67) expression -> . var EQUAL expression
    (68) expression -> . simple_expression
    (69) expression -> . var EQUAL AMPERSANT ID
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (72) simple_expression -> . additive_expression relop additive_expression
    (73) simple_expression -> . additive_expression
    (102) empty -> .
    (80) additive_expression -> . additive_expression addop term
    (81) additive_expression -> . term
    (82) additive_expression -> . term MINUSMINUS
    (83) additive_expression -> . term PLUSPLUS
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 69
    LBLOCK          shift and go to state 76
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 78
    ID              shift and go to state 58
    ECHO            reduce using rule 102 (empty -> .)
    ELSE            reduce using rule 102 (empty -> .)
    CLOSE_TAG       reduce using rule 102 (empty -> .)
    AMPERSANT       reduce using rule 102 (empty -> .)
    FUNCTION        reduce using rule 102 (empty -> .)
    REQUIRE         reduce using rule 102 (empty -> .)
    CLASS           reduce using rule 102 (empty -> .)
    BREAK           reduce using rule 102 (empty -> .)
    RBLOCK          reduce using rule 102 (empty -> .)
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

  ! ID              [ reduce using rule 102 (empty -> .) ]
  ! IF              [ reduce using rule 102 (empty -> .) ]
  ! SWITCH          [ reduce using rule 102 (empty -> .) ]
  ! CASE            [ reduce using rule 102 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 102 (empty -> .) ]
  ! FOR             [ reduce using rule 102 (empty -> .) ]
  ! WHILE           [ reduce using rule 102 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 102 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 102 (empty -> .) ]
  ! RETURN          [ reduce using rule 102 (empty -> .) ]
  ! LPAREN          [ reduce using rule 102 (empty -> .) ]
  ! NUMBER          [ reduce using rule 102 (empty -> .) ]
  ! TRUE            [ reduce using rule 102 (empty -> .) ]
  ! FALSE           [ reduce using rule 102 (empty -> .) ]

    var                            shift and go to state 56
    statement                      shift and go to state 153
    expression_stmt                shift and go to state 70
    compount_stmt                  shift and go to state 71
    selection_stmt                 shift and go to state 72
    iteration_stmt                 shift and go to state 73
    return_stmt                    shift and go to state 74
    expression                     shift and go to state 75
    print_stmt                     shift and go to state 77
    additive_expression            shift and go to state 59
    simple_expression              shift and go to state 57
    empty                          shift and go to state 17
    term                           shift and go to state 60
    factor                         shift and go to state 61
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 120

    (59) selection_stmt -> CASE NUMBER COLON statement . BREAK SEMICOLON

    BREAK           shift and go to state 154


state 121

    (60) selection_stmt -> DEFAULT COLON statement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 155


state 122

    (54) expression_stmt -> expression SEMICOLON .

    BREAK           reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    ELSE            reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    CLOSE_TAG       reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    ID              reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    AMPERSANT       reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    FUNCTION        reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    REQUIRE         reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    CLASS           reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    IF              reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    SWITCH          reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    CASE            reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    DEFAULT         reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    FOR             reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    WHILE           reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    ECHO            reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    LBLOCK          reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    RETURN          reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    LPAREN          reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    NUMBER          reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    TRUE            reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    FALSE           reduce using rule 54 (expression_stmt -> expression SEMICOLON .)
    RBLOCK          reduce using rule 54 (expression_stmt -> expression SEMICOLON .)


state 123

    (44) compount_stmt -> LBLOCK print_stmt . local_declarations print_stmt statement_list print_stmt RBLOCK
    (11) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (12) print_stmt -> print_stmt . ECHO ID SEMICOLON
    (45) local_declarations -> . local_declarations var_declaration
    (46) local_declarations -> . empty
    (102) empty -> .

  ! shift/reduce conflict for ECHO resolved as shift
    ECHO            shift and go to state 26
    ID              reduce using rule 102 (empty -> .)
    AMPERSANT       reduce using rule 102 (empty -> .)
    SEMICOLON       reduce using rule 102 (empty -> .)
    LBLOCK          reduce using rule 102 (empty -> .)
    IF              reduce using rule 102 (empty -> .)
    SWITCH          reduce using rule 102 (empty -> .)
    CASE            reduce using rule 102 (empty -> .)
    DEFAULT         reduce using rule 102 (empty -> .)
    FOR             reduce using rule 102 (empty -> .)
    WHILE           reduce using rule 102 (empty -> .)
    RETURN          reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    NUMBER          reduce using rule 102 (empty -> .)
    TRUE            reduce using rule 102 (empty -> .)
    FALSE           reduce using rule 102 (empty -> .)
    RBLOCK          reduce using rule 102 (empty -> .)

  ! ECHO            [ reduce using rule 102 (empty -> .) ]

    local_declarations             shift and go to state 156
    empty                          shift and go to state 157

state 124

    (65) return_stmt -> RETURN SEMICOLON .

    BREAK           reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    ELSE            reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    CLOSE_TAG       reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    ID              reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    AMPERSANT       reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    REQUIRE         reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    CLASS           reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    IF              reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    CASE            reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    FOR             reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    WHILE           reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    ECHO            reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    LBLOCK          reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    RETURN          reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    TRUE            reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    FALSE           reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)
    RBLOCK          reduce using rule 65 (return_stmt -> RETURN SEMICOLON .)


state 125

    (66) return_stmt -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 158


state 126

    (62) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON . expression SEMICOLON additive_expression RPAREN statement
    (67) expression -> . var EQUAL expression
    (68) expression -> . simple_expression
    (69) expression -> . var EQUAL AMPERSANT ID
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (72) simple_expression -> . additive_expression relop additive_expression
    (73) simple_expression -> . additive_expression
    (80) additive_expression -> . additive_expression addop term
    (81) additive_expression -> . term
    (82) additive_expression -> . term MINUSMINUS
    (83) additive_expression -> . term PLUSPLUS
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

    ID              shift and go to state 58
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    expression                     shift and go to state 159
    additive_expression            shift and go to state 59
    var                            shift and go to state 56
    simple_expression              shift and go to state 57
    term                           shift and go to state 60
    factor                         shift and go to state 61
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 127

    (63) iteration_stmt -> WHILE LPAREN expression RPAREN . statement
    (49) statement -> . expression_stmt
    (50) statement -> . compount_stmt
    (51) statement -> . selection_stmt
    (52) statement -> . iteration_stmt
    (53) statement -> . return_stmt
    (54) expression_stmt -> . expression SEMICOLON
    (55) expression_stmt -> . SEMICOLON
    (44) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (56) selection_stmt -> . IF LPAREN expression RPAREN statement
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . print_stmt
    (62) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (63) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (64) iteration_stmt -> . print_stmt
    (65) return_stmt -> . RETURN SEMICOLON
    (66) return_stmt -> . RETURN expression SEMICOLON
    (67) expression -> . var EQUAL expression
    (68) expression -> . simple_expression
    (69) expression -> . var EQUAL AMPERSANT ID
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (72) simple_expression -> . additive_expression relop additive_expression
    (73) simple_expression -> . additive_expression
    (102) empty -> .
    (80) additive_expression -> . additive_expression addop term
    (81) additive_expression -> . term
    (82) additive_expression -> . term MINUSMINUS
    (83) additive_expression -> . term PLUSPLUS
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 69
    LBLOCK          shift and go to state 76
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 78
    ID              shift and go to state 58
    ECHO            reduce using rule 102 (empty -> .)
    ELSE            reduce using rule 102 (empty -> .)
    CLOSE_TAG       reduce using rule 102 (empty -> .)
    AMPERSANT       reduce using rule 102 (empty -> .)
    FUNCTION        reduce using rule 102 (empty -> .)
    REQUIRE         reduce using rule 102 (empty -> .)
    CLASS           reduce using rule 102 (empty -> .)
    BREAK           reduce using rule 102 (empty -> .)
    RBLOCK          reduce using rule 102 (empty -> .)
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

  ! ID              [ reduce using rule 102 (empty -> .) ]
  ! IF              [ reduce using rule 102 (empty -> .) ]
  ! SWITCH          [ reduce using rule 102 (empty -> .) ]
  ! CASE            [ reduce using rule 102 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 102 (empty -> .) ]
  ! FOR             [ reduce using rule 102 (empty -> .) ]
  ! WHILE           [ reduce using rule 102 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 102 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 102 (empty -> .) ]
  ! RETURN          [ reduce using rule 102 (empty -> .) ]
  ! LPAREN          [ reduce using rule 102 (empty -> .) ]
  ! NUMBER          [ reduce using rule 102 (empty -> .) ]
  ! TRUE            [ reduce using rule 102 (empty -> .) ]
  ! FALSE           [ reduce using rule 102 (empty -> .) ]

    expression                     shift and go to state 75
    statement                      shift and go to state 160
    expression_stmt                shift and go to state 70
    compount_stmt                  shift and go to state 71
    selection_stmt                 shift and go to state 72
    iteration_stmt                 shift and go to state 73
    return_stmt                    shift and go to state 74
    print_stmt                     shift and go to state 77
    var                            shift and go to state 56
    additive_expression            shift and go to state 59
    simple_expression              shift and go to state 57
    empty                          shift and go to state 17
    term                           shift and go to state 60
    factor                         shift and go to state 61
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 128

    (33) var_declaration -> ID EQUAL ID SEMICOLON var_declaration .

    CLOSE_TAG       reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    ID              reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    CLASS           reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    IF              reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    SWITCH          reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    CASE            reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    FOR             reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    WHILE           reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    ECHO            reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    RETURN          reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    LPAREN          reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    NUMBER          reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    TRUE            reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    FALSE           reduce using rule 33 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)


state 129

    (29) var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .

    CLOSE_TAG       reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    ID              reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    CLASS           reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    IF              reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    SWITCH          reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    CASE            reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    FOR             reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    WHILE           reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    ECHO            reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    RETURN          reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    LPAREN          reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    NUMBER          reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    TRUE            reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    FALSE           reduce using rule 29 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)


state 130

    (31) var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .

    CLOSE_TAG       reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    ID              reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    CLASS           reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    IF              reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    SWITCH          reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    CASE            reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    FOR             reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    WHILE           reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    ECHO            reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    RETURN          reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    LPAREN          reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    NUMBER          reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    TRUE            reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    FALSE           reduce using rule 31 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)


state 131

    (37) fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN . compount_stmt
    (44) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK

    LBLOCK          shift and go to state 76

    compount_stmt                  shift and go to state 161

state 132

    (40) param_list -> param_list COMMA . param
    (42) param -> . ID
    (43) param -> . ID LBRACKET RBRACKET

    ID              shift and go to state 91

    param                          shift and go to state 162

state 133

    (43) param -> ID LBRACKET . RBRACKET

    RBRACKET        shift and go to state 163


state 134

    (14) header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .

    CLOSE_TAG       reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    ID              reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    AMPERSANT       reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    REQUIRE         reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    CLASS           reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    IF              reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    SWITCH          reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    CASE            reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    FOR             reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    ECHO            reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)


state 135

    (17) class_stmt -> LBLOCK attributes methods . RBLOCK
    (22) methods -> methods . scope fun_declaration
    (24) scope -> . PRIVATE
    (25) scope -> . PUBLIC
    (26) scope -> . PROTECTED

    RBLOCK          shift and go to state 164
    PRIVATE         shift and go to state 96
    PUBLIC          shift and go to state 97
    PROTECTED       shift and go to state 98

    scope                          shift and go to state 165

state 136

    (19) class_stmt -> LBLOCK attributes RBLOCK .

    CLOSE_TAG       reduce using rule 19 (class_stmt -> LBLOCK attributes RBLOCK .)
    ID              reduce using rule 19 (class_stmt -> LBLOCK attributes RBLOCK .)
    AMPERSANT       reduce using rule 19 (class_stmt -> LBLOCK attributes RBLOCK .)
    FUNCTION        reduce using rule 19 (class_stmt -> LBLOCK attributes RBLOCK .)
    REQUIRE         reduce using rule 19 (class_stmt -> LBLOCK attributes RBLOCK .)
    CLASS           reduce using rule 19 (class_stmt -> LBLOCK attributes RBLOCK .)
    IF              reduce using rule 19 (class_stmt -> LBLOCK attributes RBLOCK .)
    SWITCH          reduce using rule 19 (class_stmt -> LBLOCK attributes RBLOCK .)
    CASE            reduce using rule 19 (class_stmt -> LBLOCK attributes RBLOCK .)
    DEFAULT         reduce using rule 19 (class_stmt -> LBLOCK attributes RBLOCK .)
    FOR             reduce using rule 19 (class_stmt -> LBLOCK attributes RBLOCK .)
    WHILE           reduce using rule 19 (class_stmt -> LBLOCK attributes RBLOCK .)
    ECHO            reduce using rule 19 (class_stmt -> LBLOCK attributes RBLOCK .)


state 137

    (20) attributes -> attributes scope . var_declaration
    (23) methods -> scope . fun_declaration
    (27) var_declaration -> . ID SEMICOLON var_declaration
    (28) var_declaration -> . ID SEMICOLON
    (29) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (31) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (36) var_declaration -> . AMPERSANT ID SEMICOLON
    (37) fun_declaration -> . FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt

    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13
    FUNCTION        shift and go to state 14

    var_declaration                shift and go to state 166
    fun_declaration                shift and go to state 167

state 138

    (18) class_stmt -> LBLOCK empty RBLOCK .

    CLOSE_TAG       reduce using rule 18 (class_stmt -> LBLOCK empty RBLOCK .)
    ID              reduce using rule 18 (class_stmt -> LBLOCK empty RBLOCK .)
    AMPERSANT       reduce using rule 18 (class_stmt -> LBLOCK empty RBLOCK .)
    FUNCTION        reduce using rule 18 (class_stmt -> LBLOCK empty RBLOCK .)
    REQUIRE         reduce using rule 18 (class_stmt -> LBLOCK empty RBLOCK .)
    CLASS           reduce using rule 18 (class_stmt -> LBLOCK empty RBLOCK .)
    IF              reduce using rule 18 (class_stmt -> LBLOCK empty RBLOCK .)
    SWITCH          reduce using rule 18 (class_stmt -> LBLOCK empty RBLOCK .)
    CASE            reduce using rule 18 (class_stmt -> LBLOCK empty RBLOCK .)
    DEFAULT         reduce using rule 18 (class_stmt -> LBLOCK empty RBLOCK .)
    FOR             reduce using rule 18 (class_stmt -> LBLOCK empty RBLOCK .)
    WHILE           reduce using rule 18 (class_stmt -> LBLOCK empty RBLOCK .)
    ECHO            reduce using rule 18 (class_stmt -> LBLOCK empty RBLOCK .)


state 139

    (21) attributes -> scope var_declaration .

    RBLOCK          reduce using rule 21 (attributes -> scope var_declaration .)
    PRIVATE         reduce using rule 21 (attributes -> scope var_declaration .)
    PUBLIC          reduce using rule 21 (attributes -> scope var_declaration .)
    PROTECTED       reduce using rule 21 (attributes -> scope var_declaration .)


state 140

    (90) factor -> LPAREN expression RPAREN .

    MINUSMINUS      reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    ISEQUAL         reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 90 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 90 (factor -> LPAREN expression RPAREN .)


state 141

    (56) selection_stmt -> IF LPAREN expression RPAREN statement .
    (57) selection_stmt -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    CLOSE_TAG       reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    AMPERSANT       reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    REQUIRE         reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 168

  ! ELSE            [ reduce using rule 56 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]


state 142

    (67) expression -> var EQUAL expression .

    RPAREN          reduce using rule 67 (expression -> var EQUAL expression .)
    SEMICOLON       reduce using rule 67 (expression -> var EQUAL expression .)
    RBRACKET        reduce using rule 67 (expression -> var EQUAL expression .)
    COMMA           reduce using rule 67 (expression -> var EQUAL expression .)


state 143

    (69) expression -> var EQUAL AMPERSANT . ID

    ID              shift and go to state 169


state 144

    (71) var -> ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 170


state 145

    (95) call -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 171


state 146

    (96) args -> args_list .
    (98) args_list -> args_list . COMMA expression

    RPAREN          reduce using rule 96 (args -> args_list .)
    COMMA           shift and go to state 172


state 147

    (97) args -> empty .

    RPAREN          reduce using rule 97 (args -> empty .)


state 148

    (99) args_list -> expression .

    COMMA           reduce using rule 99 (args_list -> expression .)
    RPAREN          reduce using rule 99 (args_list -> expression .)


state 149

    (72) simple_expression -> additive_expression relop additive_expression .
    (80) additive_expression -> additive_expression . addop term
    (84) addop -> . PLUS
    (85) addop -> . MINUS

    RPAREN          reduce using rule 72 (simple_expression -> additive_expression relop additive_expression .)
    SEMICOLON       reduce using rule 72 (simple_expression -> additive_expression relop additive_expression .)
    RBRACKET        reduce using rule 72 (simple_expression -> additive_expression relop additive_expression .)
    COMMA           reduce using rule 72 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113

    addop                          shift and go to state 105

state 150

    (91) factor -> var .

    MINUSMINUS      reduce using rule 91 (factor -> var .)
    PLUSPLUS        reduce using rule 91 (factor -> var .)
    TIMES           reduce using rule 91 (factor -> var .)
    DIVIDE          reduce using rule 91 (factor -> var .)
    PLUS            reduce using rule 91 (factor -> var .)
    MINUS           reduce using rule 91 (factor -> var .)
    RPAREN          reduce using rule 91 (factor -> var .)
    SEMICOLON       reduce using rule 91 (factor -> var .)
    RBRACKET        reduce using rule 91 (factor -> var .)
    COMMA           reduce using rule 91 (factor -> var .)
    LESS            reduce using rule 91 (factor -> var .)
    LESSEQUAL       reduce using rule 91 (factor -> var .)
    GREATER         reduce using rule 91 (factor -> var .)
    GREATEREQUAL    reduce using rule 91 (factor -> var .)
    DEQUAL          reduce using rule 91 (factor -> var .)
    ISEQUAL         reduce using rule 91 (factor -> var .)


state 151

    (80) additive_expression -> additive_expression addop term .
    (86) term -> term . mulop factor
    (88) mulop -> . TIMES
    (89) mulop -> . DIVIDE

    LESS            reduce using rule 80 (additive_expression -> additive_expression addop term .)
    LESSEQUAL       reduce using rule 80 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 80 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 80 (additive_expression -> additive_expression addop term .)
    DEQUAL          reduce using rule 80 (additive_expression -> additive_expression addop term .)
    ISEQUAL         reduce using rule 80 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 80 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 80 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 80 (additive_expression -> additive_expression addop term .)
    SEMICOLON       reduce using rule 80 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 80 (additive_expression -> additive_expression addop term .)
    COMMA           reduce using rule 80 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 118

    mulop                          shift and go to state 116

state 152

    (86) term -> term mulop factor .

    MINUSMINUS      reduce using rule 86 (term -> term mulop factor .)
    PLUSPLUS        reduce using rule 86 (term -> term mulop factor .)
    TIMES           reduce using rule 86 (term -> term mulop factor .)
    DIVIDE          reduce using rule 86 (term -> term mulop factor .)
    LESS            reduce using rule 86 (term -> term mulop factor .)
    LESSEQUAL       reduce using rule 86 (term -> term mulop factor .)
    GREATER         reduce using rule 86 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 86 (term -> term mulop factor .)
    DEQUAL          reduce using rule 86 (term -> term mulop factor .)
    ISEQUAL         reduce using rule 86 (term -> term mulop factor .)
    PLUS            reduce using rule 86 (term -> term mulop factor .)
    MINUS           reduce using rule 86 (term -> term mulop factor .)
    RPAREN          reduce using rule 86 (term -> term mulop factor .)
    SEMICOLON       reduce using rule 86 (term -> term mulop factor .)
    RBRACKET        reduce using rule 86 (term -> term mulop factor .)
    COMMA           reduce using rule 86 (term -> term mulop factor .)


state 153

    (58) selection_stmt -> SWITCH LPAREN var RPAREN statement .

    CLOSE_TAG       reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ID              reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    AMPERSANT       reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FUNCTION        reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    REQUIRE         reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    CLASS           reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    IF              reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SWITCH          reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    CASE            reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    DEFAULT         reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FOR             reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    WHILE           reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ECHO            reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    BREAK           reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ELSE            reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SEMICOLON       reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LBLOCK          reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    RETURN          reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LPAREN          reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    NUMBER          reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    TRUE            reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FALSE           reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    RBLOCK          reduce using rule 58 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)


state 154

    (59) selection_stmt -> CASE NUMBER COLON statement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 173


state 155

    (60) selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .

    CLOSE_TAG       reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ID              reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    AMPERSANT       reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FUNCTION        reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    REQUIRE         reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    CLASS           reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    IF              reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    SWITCH          reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    CASE            reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    DEFAULT         reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FOR             reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    WHILE           reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ECHO            reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    BREAK           reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ELSE            reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    LBLOCK          reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    RETURN          reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    LPAREN          reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    NUMBER          reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    TRUE            reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FALSE           reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    RBLOCK          reduce using rule 60 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)


state 156

    (44) compount_stmt -> LBLOCK print_stmt local_declarations . print_stmt statement_list print_stmt RBLOCK
    (45) local_declarations -> local_declarations . var_declaration
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (27) var_declaration -> . ID SEMICOLON var_declaration
    (28) var_declaration -> . ID SEMICOLON
    (29) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (31) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON
    (33) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL ID SEMICOLON
    (35) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (36) var_declaration -> . AMPERSANT ID SEMICOLON
    (102) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13
    ECHO            reduce using rule 102 (empty -> .)
    SEMICOLON       reduce using rule 102 (empty -> .)
    LBLOCK          reduce using rule 102 (empty -> .)
    IF              reduce using rule 102 (empty -> .)
    SWITCH          reduce using rule 102 (empty -> .)
    CASE            reduce using rule 102 (empty -> .)
    DEFAULT         reduce using rule 102 (empty -> .)
    FOR             reduce using rule 102 (empty -> .)
    WHILE           reduce using rule 102 (empty -> .)
    RETURN          reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    NUMBER          reduce using rule 102 (empty -> .)
    TRUE            reduce using rule 102 (empty -> .)
    FALSE           reduce using rule 102 (empty -> .)
    RBLOCK          reduce using rule 102 (empty -> .)

  ! ID              [ reduce using rule 102 (empty -> .) ]

    print_stmt                     shift and go to state 174
    var_declaration                shift and go to state 175
    empty                          shift and go to state 17

state 157

    (46) local_declarations -> empty .

    ID              reduce using rule 46 (local_declarations -> empty .)
    AMPERSANT       reduce using rule 46 (local_declarations -> empty .)
    ECHO            reduce using rule 46 (local_declarations -> empty .)
    SEMICOLON       reduce using rule 46 (local_declarations -> empty .)
    LBLOCK          reduce using rule 46 (local_declarations -> empty .)
    IF              reduce using rule 46 (local_declarations -> empty .)
    SWITCH          reduce using rule 46 (local_declarations -> empty .)
    CASE            reduce using rule 46 (local_declarations -> empty .)
    DEFAULT         reduce using rule 46 (local_declarations -> empty .)
    FOR             reduce using rule 46 (local_declarations -> empty .)
    WHILE           reduce using rule 46 (local_declarations -> empty .)
    RETURN          reduce using rule 46 (local_declarations -> empty .)
    LPAREN          reduce using rule 46 (local_declarations -> empty .)
    NUMBER          reduce using rule 46 (local_declarations -> empty .)
    TRUE            reduce using rule 46 (local_declarations -> empty .)
    FALSE           reduce using rule 46 (local_declarations -> empty .)
    RBLOCK          reduce using rule 46 (local_declarations -> empty .)


state 158

    (66) return_stmt -> RETURN expression SEMICOLON .

    BREAK           reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    CLOSE_TAG       reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    ID              reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    AMPERSANT       reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    REQUIRE         reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    CLASS           reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    IF              reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    ECHO            reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    LBLOCK          reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)
    RBLOCK          reduce using rule 66 (return_stmt -> RETURN expression SEMICOLON .)


state 159

    (62) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression . SEMICOLON additive_expression RPAREN statement

    SEMICOLON       shift and go to state 176


state 160

    (63) iteration_stmt -> WHILE LPAREN expression RPAREN statement .

    CLOSE_TAG       reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    AMPERSANT       reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    REQUIRE         reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 63 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)


state 161

    (37) fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .

    CLOSE_TAG       reduce using rule 37 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    ID              reduce using rule 37 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    AMPERSANT       reduce using rule 37 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    FUNCTION        reduce using rule 37 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    REQUIRE         reduce using rule 37 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    CLASS           reduce using rule 37 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    IF              reduce using rule 37 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    SWITCH          reduce using rule 37 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    CASE            reduce using rule 37 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    DEFAULT         reduce using rule 37 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    FOR             reduce using rule 37 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    WHILE           reduce using rule 37 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    ECHO            reduce using rule 37 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    RBLOCK          reduce using rule 37 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    PRIVATE         reduce using rule 37 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    PUBLIC          reduce using rule 37 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    PROTECTED       reduce using rule 37 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)


state 162

    (40) param_list -> param_list COMMA param .

    COMMA           reduce using rule 40 (param_list -> param_list COMMA param .)
    RPAREN          reduce using rule 40 (param_list -> param_list COMMA param .)


state 163

    (43) param -> ID LBRACKET RBRACKET .

    COMMA           reduce using rule 43 (param -> ID LBRACKET RBRACKET .)
    RPAREN          reduce using rule 43 (param -> ID LBRACKET RBRACKET .)


state 164

    (17) class_stmt -> LBLOCK attributes methods RBLOCK .

    CLOSE_TAG       reduce using rule 17 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    ID              reduce using rule 17 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    AMPERSANT       reduce using rule 17 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    FUNCTION        reduce using rule 17 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    REQUIRE         reduce using rule 17 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    CLASS           reduce using rule 17 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    IF              reduce using rule 17 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    SWITCH          reduce using rule 17 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    CASE            reduce using rule 17 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    DEFAULT         reduce using rule 17 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    FOR             reduce using rule 17 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    WHILE           reduce using rule 17 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    ECHO            reduce using rule 17 (class_stmt -> LBLOCK attributes methods RBLOCK .)


state 165

    (22) methods -> methods scope . fun_declaration
    (37) fun_declaration -> . FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt

    FUNCTION        shift and go to state 14

    fun_declaration                shift and go to state 177

state 166

    (20) attributes -> attributes scope var_declaration .

    RBLOCK          reduce using rule 20 (attributes -> attributes scope var_declaration .)
    PRIVATE         reduce using rule 20 (attributes -> attributes scope var_declaration .)
    PUBLIC          reduce using rule 20 (attributes -> attributes scope var_declaration .)
    PROTECTED       reduce using rule 20 (attributes -> attributes scope var_declaration .)


state 167

    (23) methods -> scope fun_declaration .

    RBLOCK          reduce using rule 23 (methods -> scope fun_declaration .)
    PRIVATE         reduce using rule 23 (methods -> scope fun_declaration .)
    PUBLIC          reduce using rule 23 (methods -> scope fun_declaration .)
    PROTECTED       reduce using rule 23 (methods -> scope fun_declaration .)


state 168

    (57) selection_stmt -> IF LPAREN expression RPAREN statement ELSE . statement
    (49) statement -> . expression_stmt
    (50) statement -> . compount_stmt
    (51) statement -> . selection_stmt
    (52) statement -> . iteration_stmt
    (53) statement -> . return_stmt
    (54) expression_stmt -> . expression SEMICOLON
    (55) expression_stmt -> . SEMICOLON
    (44) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (56) selection_stmt -> . IF LPAREN expression RPAREN statement
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . print_stmt
    (62) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (63) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (64) iteration_stmt -> . print_stmt
    (65) return_stmt -> . RETURN SEMICOLON
    (66) return_stmt -> . RETURN expression SEMICOLON
    (67) expression -> . var EQUAL expression
    (68) expression -> . simple_expression
    (69) expression -> . var EQUAL AMPERSANT ID
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (72) simple_expression -> . additive_expression relop additive_expression
    (73) simple_expression -> . additive_expression
    (102) empty -> .
    (80) additive_expression -> . additive_expression addop term
    (81) additive_expression -> . term
    (82) additive_expression -> . term MINUSMINUS
    (83) additive_expression -> . term PLUSPLUS
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 69
    LBLOCK          shift and go to state 76
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 78
    ID              shift and go to state 58
    ECHO            reduce using rule 102 (empty -> .)
    ELSE            reduce using rule 102 (empty -> .)
    CLOSE_TAG       reduce using rule 102 (empty -> .)
    AMPERSANT       reduce using rule 102 (empty -> .)
    FUNCTION        reduce using rule 102 (empty -> .)
    REQUIRE         reduce using rule 102 (empty -> .)
    CLASS           reduce using rule 102 (empty -> .)
    BREAK           reduce using rule 102 (empty -> .)
    RBLOCK          reduce using rule 102 (empty -> .)
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

  ! ID              [ reduce using rule 102 (empty -> .) ]
  ! IF              [ reduce using rule 102 (empty -> .) ]
  ! SWITCH          [ reduce using rule 102 (empty -> .) ]
  ! CASE            [ reduce using rule 102 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 102 (empty -> .) ]
  ! FOR             [ reduce using rule 102 (empty -> .) ]
  ! WHILE           [ reduce using rule 102 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 102 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 102 (empty -> .) ]
  ! RETURN          [ reduce using rule 102 (empty -> .) ]
  ! LPAREN          [ reduce using rule 102 (empty -> .) ]
  ! NUMBER          [ reduce using rule 102 (empty -> .) ]
  ! TRUE            [ reduce using rule 102 (empty -> .) ]
  ! FALSE           [ reduce using rule 102 (empty -> .) ]

    expression                     shift and go to state 75
    statement                      shift and go to state 178
    expression_stmt                shift and go to state 70
    compount_stmt                  shift and go to state 71
    selection_stmt                 shift and go to state 72
    iteration_stmt                 shift and go to state 73
    return_stmt                    shift and go to state 74
    print_stmt                     shift and go to state 77
    var                            shift and go to state 56
    additive_expression            shift and go to state 59
    simple_expression              shift and go to state 57
    empty                          shift and go to state 17
    term                           shift and go to state 60
    factor                         shift and go to state 61
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 169

    (69) expression -> var EQUAL AMPERSANT ID .

    RPAREN          reduce using rule 69 (expression -> var EQUAL AMPERSANT ID .)
    SEMICOLON       reduce using rule 69 (expression -> var EQUAL AMPERSANT ID .)
    RBRACKET        reduce using rule 69 (expression -> var EQUAL AMPERSANT ID .)
    COMMA           reduce using rule 69 (expression -> var EQUAL AMPERSANT ID .)


state 170

    (71) var -> ID LBRACKET expression RBRACKET .

    EQUAL           reduce using rule 71 (var -> ID LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 71 (var -> ID LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 71 (var -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 71 (var -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 71 (var -> ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 71 (var -> ID LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 71 (var -> ID LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 71 (var -> ID LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 71 (var -> ID LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 71 (var -> ID LBRACKET expression RBRACKET .)
    ISEQUAL         reduce using rule 71 (var -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 71 (var -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 71 (var -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 71 (var -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 71 (var -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 71 (var -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 71 (var -> ID LBRACKET expression RBRACKET .)


state 171

    (95) call -> ID LPAREN args RPAREN .

    MINUSMINUS      reduce using rule 95 (call -> ID LPAREN args RPAREN .)
    PLUSPLUS        reduce using rule 95 (call -> ID LPAREN args RPAREN .)
    TIMES           reduce using rule 95 (call -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 95 (call -> ID LPAREN args RPAREN .)
    LESS            reduce using rule 95 (call -> ID LPAREN args RPAREN .)
    LESSEQUAL       reduce using rule 95 (call -> ID LPAREN args RPAREN .)
    GREATER         reduce using rule 95 (call -> ID LPAREN args RPAREN .)
    GREATEREQUAL    reduce using rule 95 (call -> ID LPAREN args RPAREN .)
    DEQUAL          reduce using rule 95 (call -> ID LPAREN args RPAREN .)
    ISEQUAL         reduce using rule 95 (call -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 95 (call -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 95 (call -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 95 (call -> ID LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 95 (call -> ID LPAREN args RPAREN .)
    RBRACKET        reduce using rule 95 (call -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 95 (call -> ID LPAREN args RPAREN .)


state 172

    (98) args_list -> args_list COMMA . expression
    (67) expression -> . var EQUAL expression
    (68) expression -> . simple_expression
    (69) expression -> . var EQUAL AMPERSANT ID
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (72) simple_expression -> . additive_expression relop additive_expression
    (73) simple_expression -> . additive_expression
    (80) additive_expression -> . additive_expression addop term
    (81) additive_expression -> . term
    (82) additive_expression -> . term MINUSMINUS
    (83) additive_expression -> . term PLUSPLUS
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

    ID              shift and go to state 58
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    expression                     shift and go to state 179
    var                            shift and go to state 56
    simple_expression              shift and go to state 57
    additive_expression            shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 173

    (59) selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .

    CLOSE_TAG       reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ID              reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    AMPERSANT       reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FUNCTION        reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    REQUIRE         reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    CLASS           reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    IF              reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    SWITCH          reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    CASE            reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    DEFAULT         reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FOR             reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    WHILE           reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ECHO            reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    BREAK           reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ELSE            reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    LBLOCK          reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    RETURN          reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    LPAREN          reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    NUMBER          reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    TRUE            reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FALSE           reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    RBLOCK          reduce using rule 59 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)


state 174

    (44) compount_stmt -> LBLOCK print_stmt local_declarations print_stmt . statement_list print_stmt RBLOCK
    (11) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (12) print_stmt -> print_stmt . ECHO ID SEMICOLON
    (47) statement_list -> . statement_list statement
    (48) statement_list -> . empty
    (102) empty -> .

  ! shift/reduce conflict for ECHO resolved as shift
    ECHO            shift and go to state 26
    SEMICOLON       reduce using rule 102 (empty -> .)
    LBLOCK          reduce using rule 102 (empty -> .)
    IF              reduce using rule 102 (empty -> .)
    SWITCH          reduce using rule 102 (empty -> .)
    CASE            reduce using rule 102 (empty -> .)
    DEFAULT         reduce using rule 102 (empty -> .)
    FOR             reduce using rule 102 (empty -> .)
    WHILE           reduce using rule 102 (empty -> .)
    RETURN          reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    NUMBER          reduce using rule 102 (empty -> .)
    TRUE            reduce using rule 102 (empty -> .)
    FALSE           reduce using rule 102 (empty -> .)
    RBLOCK          reduce using rule 102 (empty -> .)

  ! ECHO            [ reduce using rule 102 (empty -> .) ]

    statement_list                 shift and go to state 180
    empty                          shift and go to state 181

state 175

    (45) local_declarations -> local_declarations var_declaration .

    ID              reduce using rule 45 (local_declarations -> local_declarations var_declaration .)
    AMPERSANT       reduce using rule 45 (local_declarations -> local_declarations var_declaration .)
    ECHO            reduce using rule 45 (local_declarations -> local_declarations var_declaration .)
    SEMICOLON       reduce using rule 45 (local_declarations -> local_declarations var_declaration .)
    LBLOCK          reduce using rule 45 (local_declarations -> local_declarations var_declaration .)
    IF              reduce using rule 45 (local_declarations -> local_declarations var_declaration .)
    SWITCH          reduce using rule 45 (local_declarations -> local_declarations var_declaration .)
    CASE            reduce using rule 45 (local_declarations -> local_declarations var_declaration .)
    DEFAULT         reduce using rule 45 (local_declarations -> local_declarations var_declaration .)
    FOR             reduce using rule 45 (local_declarations -> local_declarations var_declaration .)
    WHILE           reduce using rule 45 (local_declarations -> local_declarations var_declaration .)
    RETURN          reduce using rule 45 (local_declarations -> local_declarations var_declaration .)
    LPAREN          reduce using rule 45 (local_declarations -> local_declarations var_declaration .)
    NUMBER          reduce using rule 45 (local_declarations -> local_declarations var_declaration .)
    TRUE            reduce using rule 45 (local_declarations -> local_declarations var_declaration .)
    FALSE           reduce using rule 45 (local_declarations -> local_declarations var_declaration .)
    RBLOCK          reduce using rule 45 (local_declarations -> local_declarations var_declaration .)


state 176

    (62) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON . additive_expression RPAREN statement
    (80) additive_expression -> . additive_expression addop term
    (81) additive_expression -> . term
    (82) additive_expression -> . term MINUSMINUS
    (83) additive_expression -> . term PLUSPLUS
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    ID              shift and go to state 58
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

    additive_expression            shift and go to state 182
    term                           shift and go to state 60
    factor                         shift and go to state 61
    var                            shift and go to state 150
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 177

    (22) methods -> methods scope fun_declaration .

    RBLOCK          reduce using rule 22 (methods -> methods scope fun_declaration .)
    PRIVATE         reduce using rule 22 (methods -> methods scope fun_declaration .)
    PUBLIC          reduce using rule 22 (methods -> methods scope fun_declaration .)
    PROTECTED       reduce using rule 22 (methods -> methods scope fun_declaration .)


state 178

    (57) selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .

    CLOSE_TAG       reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    AMPERSANT       reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FUNCTION        reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    REQUIRE         reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    CLASS           reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ECHO            reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBLOCK          reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRUE            reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FALSE           reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBLOCK          reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)


state 179

    (98) args_list -> args_list COMMA expression .

    COMMA           reduce using rule 98 (args_list -> args_list COMMA expression .)
    RPAREN          reduce using rule 98 (args_list -> args_list COMMA expression .)


state 180

    (44) compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list . print_stmt RBLOCK
    (47) statement_list -> statement_list . statement
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (49) statement -> . expression_stmt
    (50) statement -> . compount_stmt
    (51) statement -> . selection_stmt
    (52) statement -> . iteration_stmt
    (53) statement -> . return_stmt
    (102) empty -> .
    (54) expression_stmt -> . expression SEMICOLON
    (55) expression_stmt -> . SEMICOLON
    (44) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (56) selection_stmt -> . IF LPAREN expression RPAREN statement
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . print_stmt
    (62) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (63) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (64) iteration_stmt -> . print_stmt
    (65) return_stmt -> . RETURN SEMICOLON
    (66) return_stmt -> . RETURN expression SEMICOLON
    (67) expression -> . var EQUAL expression
    (68) expression -> . simple_expression
    (69) expression -> . var EQUAL AMPERSANT ID
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (72) simple_expression -> . additive_expression relop additive_expression
    (73) simple_expression -> . additive_expression
    (80) additive_expression -> . additive_expression addop term
    (81) additive_expression -> . term
    (82) additive_expression -> . term MINUSMINUS
    (83) additive_expression -> . term PLUSPLUS
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBLOCK          reduce using rule 102 (empty -> .)
    ECHO            reduce using rule 102 (empty -> .)
    SEMICOLON       shift and go to state 69
    LBLOCK          shift and go to state 76
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 78
    ID              shift and go to state 58
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

  ! SEMICOLON       [ reduce using rule 102 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 102 (empty -> .) ]
  ! IF              [ reduce using rule 102 (empty -> .) ]
  ! SWITCH          [ reduce using rule 102 (empty -> .) ]
  ! CASE            [ reduce using rule 102 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 102 (empty -> .) ]
  ! FOR             [ reduce using rule 102 (empty -> .) ]
  ! WHILE           [ reduce using rule 102 (empty -> .) ]
  ! RETURN          [ reduce using rule 102 (empty -> .) ]
  ! ID              [ reduce using rule 102 (empty -> .) ]
  ! LPAREN          [ reduce using rule 102 (empty -> .) ]
  ! NUMBER          [ reduce using rule 102 (empty -> .) ]
  ! TRUE            [ reduce using rule 102 (empty -> .) ]
  ! FALSE           [ reduce using rule 102 (empty -> .) ]

    print_stmt                     shift and go to state 183
    statement                      shift and go to state 184
    empty                          shift and go to state 17
    expression_stmt                shift and go to state 70
    compount_stmt                  shift and go to state 71
    selection_stmt                 shift and go to state 72
    iteration_stmt                 shift and go to state 73
    return_stmt                    shift and go to state 74
    expression                     shift and go to state 75
    var                            shift and go to state 56
    additive_expression            shift and go to state 59
    simple_expression              shift and go to state 57
    term                           shift and go to state 60
    factor                         shift and go to state 61
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 181

    (48) statement_list -> empty .

    SEMICOLON       reduce using rule 48 (statement_list -> empty .)
    LBLOCK          reduce using rule 48 (statement_list -> empty .)
    IF              reduce using rule 48 (statement_list -> empty .)
    SWITCH          reduce using rule 48 (statement_list -> empty .)
    CASE            reduce using rule 48 (statement_list -> empty .)
    DEFAULT         reduce using rule 48 (statement_list -> empty .)
    FOR             reduce using rule 48 (statement_list -> empty .)
    WHILE           reduce using rule 48 (statement_list -> empty .)
    RETURN          reduce using rule 48 (statement_list -> empty .)
    ID              reduce using rule 48 (statement_list -> empty .)
    LPAREN          reduce using rule 48 (statement_list -> empty .)
    NUMBER          reduce using rule 48 (statement_list -> empty .)
    TRUE            reduce using rule 48 (statement_list -> empty .)
    FALSE           reduce using rule 48 (statement_list -> empty .)
    RBLOCK          reduce using rule 48 (statement_list -> empty .)
    ECHO            reduce using rule 48 (statement_list -> empty .)


state 182

    (62) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression . RPAREN statement
    (80) additive_expression -> additive_expression . addop term
    (84) addop -> . PLUS
    (85) addop -> . MINUS

    RPAREN          shift and go to state 185
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113

    addop                          shift and go to state 105

state 183

    (44) compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt . RBLOCK
    (11) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (12) print_stmt -> print_stmt . ECHO ID SEMICOLON
    (61) selection_stmt -> print_stmt .
    (64) iteration_stmt -> print_stmt .

  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for LBLOCK resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for RETURN resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for ID resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for LPAREN resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for NUMBER resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for TRUE resolved using rule 61 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FALSE resolved using rule 61 (selection_stmt -> print_stmt .)
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
    RBLOCK          shift and go to state 186
    ECHO            shift and go to state 26
    SEMICOLON       reduce using rule 61 (selection_stmt -> print_stmt .)
    LBLOCK          reduce using rule 61 (selection_stmt -> print_stmt .)
    IF              reduce using rule 61 (selection_stmt -> print_stmt .)
    SWITCH          reduce using rule 61 (selection_stmt -> print_stmt .)
    CASE            reduce using rule 61 (selection_stmt -> print_stmt .)
    DEFAULT         reduce using rule 61 (selection_stmt -> print_stmt .)
    FOR             reduce using rule 61 (selection_stmt -> print_stmt .)
    WHILE           reduce using rule 61 (selection_stmt -> print_stmt .)
    RETURN          reduce using rule 61 (selection_stmt -> print_stmt .)
    ID              reduce using rule 61 (selection_stmt -> print_stmt .)
    LPAREN          reduce using rule 61 (selection_stmt -> print_stmt .)
    NUMBER          reduce using rule 61 (selection_stmt -> print_stmt .)
    TRUE            reduce using rule 61 (selection_stmt -> print_stmt .)
    FALSE           reduce using rule 61 (selection_stmt -> print_stmt .)

  ! RBLOCK          [ reduce using rule 61 (selection_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 61 (selection_stmt -> print_stmt .) ]
  ! SEMICOLON       [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! LBLOCK          [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! IF              [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! SWITCH          [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! CASE            [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! DEFAULT         [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! FOR             [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! WHILE           [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! RETURN          [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! ID              [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! LPAREN          [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! NUMBER          [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! TRUE            [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! FALSE           [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! RBLOCK          [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 64 (iteration_stmt -> print_stmt .) ]


state 184

    (47) statement_list -> statement_list statement .

    SEMICOLON       reduce using rule 47 (statement_list -> statement_list statement .)
    LBLOCK          reduce using rule 47 (statement_list -> statement_list statement .)
    IF              reduce using rule 47 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 47 (statement_list -> statement_list statement .)
    CASE            reduce using rule 47 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 47 (statement_list -> statement_list statement .)
    FOR             reduce using rule 47 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 47 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 47 (statement_list -> statement_list statement .)
    ID              reduce using rule 47 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 47 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 47 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 47 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 47 (statement_list -> statement_list statement .)
    RBLOCK          reduce using rule 47 (statement_list -> statement_list statement .)
    ECHO            reduce using rule 47 (statement_list -> statement_list statement .)


state 185

    (62) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN . statement
    (49) statement -> . expression_stmt
    (50) statement -> . compount_stmt
    (51) statement -> . selection_stmt
    (52) statement -> . iteration_stmt
    (53) statement -> . return_stmt
    (54) expression_stmt -> . expression SEMICOLON
    (55) expression_stmt -> . SEMICOLON
    (44) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (56) selection_stmt -> . IF LPAREN expression RPAREN statement
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (58) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (59) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (60) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . print_stmt
    (62) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (63) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (64) iteration_stmt -> . print_stmt
    (65) return_stmt -> . RETURN SEMICOLON
    (66) return_stmt -> . RETURN expression SEMICOLON
    (67) expression -> . var EQUAL expression
    (68) expression -> . simple_expression
    (69) expression -> . var EQUAL AMPERSANT ID
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (70) var -> . ID
    (71) var -> . ID LBRACKET expression RBRACKET
    (72) simple_expression -> . additive_expression relop additive_expression
    (73) simple_expression -> . additive_expression
    (102) empty -> .
    (80) additive_expression -> . additive_expression addop term
    (81) additive_expression -> . term
    (82) additive_expression -> . term MINUSMINUS
    (83) additive_expression -> . term PLUSPLUS
    (86) term -> . term mulop factor
    (87) term -> . factor
    (90) factor -> . LPAREN expression RPAREN
    (91) factor -> . var
    (92) factor -> . call
    (93) factor -> . NUMBER
    (94) factor -> . boolean
    (95) call -> . ID LPAREN args RPAREN
    (100) boolean -> . TRUE
    (101) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 69
    LBLOCK          shift and go to state 76
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 78
    ID              shift and go to state 58
    ECHO            reduce using rule 102 (empty -> .)
    ELSE            reduce using rule 102 (empty -> .)
    CLOSE_TAG       reduce using rule 102 (empty -> .)
    AMPERSANT       reduce using rule 102 (empty -> .)
    FUNCTION        reduce using rule 102 (empty -> .)
    REQUIRE         reduce using rule 102 (empty -> .)
    CLASS           reduce using rule 102 (empty -> .)
    BREAK           reduce using rule 102 (empty -> .)
    RBLOCK          reduce using rule 102 (empty -> .)
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 63
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47

  ! ID              [ reduce using rule 102 (empty -> .) ]
  ! IF              [ reduce using rule 102 (empty -> .) ]
  ! SWITCH          [ reduce using rule 102 (empty -> .) ]
  ! CASE            [ reduce using rule 102 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 102 (empty -> .) ]
  ! FOR             [ reduce using rule 102 (empty -> .) ]
  ! WHILE           [ reduce using rule 102 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 102 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 102 (empty -> .) ]
  ! RETURN          [ reduce using rule 102 (empty -> .) ]
  ! LPAREN          [ reduce using rule 102 (empty -> .) ]
  ! NUMBER          [ reduce using rule 102 (empty -> .) ]
  ! TRUE            [ reduce using rule 102 (empty -> .) ]
  ! FALSE           [ reduce using rule 102 (empty -> .) ]

    expression                     shift and go to state 75
    additive_expression            shift and go to state 59
    statement                      shift and go to state 187
    expression_stmt                shift and go to state 70
    compount_stmt                  shift and go to state 71
    selection_stmt                 shift and go to state 72
    iteration_stmt                 shift and go to state 73
    return_stmt                    shift and go to state 74
    print_stmt                     shift and go to state 77
    var                            shift and go to state 56
    simple_expression              shift and go to state 57
    empty                          shift and go to state 17
    term                           shift and go to state 60
    factor                         shift and go to state 61
    call                           shift and go to state 62
    boolean                        shift and go to state 64

state 186

    (44) compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .

    BREAK           reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    ELSE            reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    CLOSE_TAG       reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    ID              reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    AMPERSANT       reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    FUNCTION        reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    REQUIRE         reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    CLASS           reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    IF              reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    SWITCH          reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    CASE            reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    DEFAULT         reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    FOR             reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    WHILE           reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    ECHO            reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    SEMICOLON       reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    LBLOCK          reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    RETURN          reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    LPAREN          reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    NUMBER          reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    TRUE            reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    FALSE           reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    RBLOCK          reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    PRIVATE         reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    PUBLIC          reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    PROTECTED       reduce using rule 44 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)


state 187

    (62) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .

    CLOSE_TAG       reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ID              reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    AMPERSANT       reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FUNCTION        reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    REQUIRE         reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    CLASS           reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    IF              reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    SWITCH          reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    CASE            reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    DEFAULT         reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FOR             reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    WHILE           reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ECHO            reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    BREAK           reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ELSE            reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    SEMICOLON       reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    LBLOCK          reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    RETURN          reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    LPAREN          reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    NUMBER          reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    TRUE            reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FALSE           reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    RBLOCK          reduce using rule 62 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 2 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 2 resolved as shift
WARNING: shift/reduce conflict for CASE in state 2 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 3 resolved as shift
WARNING: shift/reduce conflict for ID in state 3 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 3 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 3 resolved as shift
WARNING: shift/reduce conflict for CASE in state 3 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 9 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 9 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 9 resolved as shift
WARNING: shift/reduce conflict for ID in state 27 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 27 resolved as shift
WARNING: shift/reduce conflict for ID in state 48 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 48 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 77 resolved as shift
WARNING: shift/reduce conflict for ID in state 83 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 83 resolved as shift
WARNING: shift/reduce conflict for ID in state 84 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 84 resolved as shift
WARNING: shift/reduce conflict for ID in state 85 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 85 resolved as shift
WARNING: shift/reduce conflict for ID in state 100 resolved as shift
WARNING: shift/reduce conflict for IF in state 100 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 100 resolved as shift
WARNING: shift/reduce conflict for CASE in state 100 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 100 resolved as shift
WARNING: shift/reduce conflict for FOR in state 100 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 100 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 100 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 100 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 100 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 100 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 100 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 100 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 100 resolved as shift
WARNING: shift/reduce conflict for ID in state 119 resolved as shift
WARNING: shift/reduce conflict for IF in state 119 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 119 resolved as shift
WARNING: shift/reduce conflict for CASE in state 119 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 119 resolved as shift
WARNING: shift/reduce conflict for FOR in state 119 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 119 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 119 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 119 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 119 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 119 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 119 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 119 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 119 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 123 resolved as shift
WARNING: shift/reduce conflict for ID in state 127 resolved as shift
WARNING: shift/reduce conflict for IF in state 127 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 127 resolved as shift
WARNING: shift/reduce conflict for CASE in state 127 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 127 resolved as shift
WARNING: shift/reduce conflict for FOR in state 127 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 127 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 127 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 127 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 127 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 127 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 127 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 127 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 127 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 141 resolved as shift
WARNING: shift/reduce conflict for ID in state 156 resolved as shift
WARNING: shift/reduce conflict for ID in state 168 resolved as shift
WARNING: shift/reduce conflict for IF in state 168 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 168 resolved as shift
WARNING: shift/reduce conflict for CASE in state 168 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 168 resolved as shift
WARNING: shift/reduce conflict for FOR in state 168 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 168 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 168 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 168 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 168 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 168 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 168 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 168 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 168 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 174 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 180 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 180 resolved as shift
WARNING: shift/reduce conflict for IF in state 180 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 180 resolved as shift
WARNING: shift/reduce conflict for CASE in state 180 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 180 resolved as shift
WARNING: shift/reduce conflict for FOR in state 180 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 180 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 180 resolved as shift
WARNING: shift/reduce conflict for ID in state 180 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 180 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 180 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 180 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 180 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 183 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 183 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 183 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 183 resolved as shift
WARNING: shift/reduce conflict for ID in state 185 resolved as shift
WARNING: shift/reduce conflict for IF in state 185 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 185 resolved as shift
WARNING: shift/reduce conflict for CASE in state 185 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 185 resolved as shift
WARNING: shift/reduce conflict for FOR in state 185 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 185 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 185 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 185 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 185 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 185 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 185 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 185 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 185 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (declaration -> print_stmt)
WARNING: rejected rule (selection_stmt -> print_stmt) in state 9
WARNING: reduce/reduce conflict in state 9 resolved using rule (declaration -> print_stmt)
WARNING: rejected rule (iteration_stmt -> print_stmt) in state 9
WARNING: reduce/reduce conflict in state 77 resolved using rule (selection_stmt -> print_stmt)
WARNING: rejected rule (iteration_stmt -> print_stmt) in state 77
WARNING: reduce/reduce conflict in state 183 resolved using rule (selection_stmt -> print_stmt)
WARNING: rejected rule (iteration_stmt -> print_stmt) in state 183
WARNING: Rule (iteration_stmt -> print_stmt) is never reduced
